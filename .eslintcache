[{"C:\\Users\\Mahi\\Repos\\todo-app\\src\\index.js":"1","C:\\Users\\Mahi\\Repos\\todo-app\\src\\App.js":"2","C:\\Users\\Mahi\\Repos\\todo-app\\src\\reportWebVitals.js":"3","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\List.js":"4","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Context.js":"5","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\utility\\APICalls.js":"6","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\QuickButtons.js":"7","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Login.js":"8","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Home.js":"9","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Nav.js":"10","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\UlList\\LiList.js":"11","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\UlTodo\\LiTodo.js":"12","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Todo.js":"13","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\CreateListForm.js":"14","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\utility\\Utils.js":"15","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\utility\\Definations.js":"16","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\ProtectedRoute.js":"17","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Logout.js":"18","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Notification.js":"19"},{"size":500,"mtime":499162500000,"results":"20","hashOfConfig":"21"},{"size":3605,"mtime":1616615809072,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"21"},{"size":9932,"mtime":1616661689797,"results":"24","hashOfConfig":"21"},{"size":149,"mtime":1615074072425,"results":"25","hashOfConfig":"21"},{"size":3890,"mtime":1616351441993,"results":"26","hashOfConfig":"21"},{"size":1326,"mtime":1613941200318,"results":"27","hashOfConfig":"21"},{"size":2641,"mtime":1616309841472,"results":"28","hashOfConfig":"21"},{"size":7782,"mtime":1616610636175,"results":"29","hashOfConfig":"21"},{"size":1319,"mtime":1616312852383,"results":"30","hashOfConfig":"21"},{"size":3934,"mtime":1615146312852,"results":"31","hashOfConfig":"21"},{"size":5693,"mtime":1616352928980,"results":"32","hashOfConfig":"21"},{"size":5258,"mtime":1616362398163,"results":"33","hashOfConfig":"21"},{"size":2117,"mtime":1615763023818,"results":"34","hashOfConfig":"21"},{"size":640,"mtime":1616608557775,"results":"35","hashOfConfig":"21"},{"size":470,"mtime":1616351902889,"results":"36","hashOfConfig":"21"},{"size":653,"mtime":1616033602887,"results":"37","hashOfConfig":"21"},{"size":310,"mtime":1615751972775,"results":"38","hashOfConfig":"21"},{"size":1529,"mtime":1616611429913,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1n3pwho",{"filePath":"43","messages":"44","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"42"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"42"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"42"},"C:\\Users\\Mahi\\Repos\\todo-app\\src\\index.js",[],["92","93"],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\App.js",["94","95","96","97","98"],"import './ModernApp.css';\n\nimport React, {useEffect, useRef, useState} from 'react'\nimport {Route, BrowserRouter, Switch, Redirect, useHistory} from 'react-router-dom'\nimport {AuthContext} from './components/Context'\nimport Notification from './components/Notification'\nimport ProtectedRoute from './components/ProtectedRoute'\nimport Login from './components/Login'\nimport Logout from './components/Logout'\nimport Home from './components/Home'\nimport List from './components/List'\nimport Todo from './components/Todo'\nimport {requestAll} from './components/utility/APICalls'\nimport {tagLists} from './components/utility/Utils'\n\nconst TestComponent = ({global: [global, setGlobal__]}) => {\n  useEffect(() => {\n    console.log('Hello World!')\n  }, [])\n  return (\n    <div>\n      {!global.todoLists ? \"Please wait while we load your data!\" : \"Date loaded!\"}\n    </div>\n  )\n}\n\nconst App = _ => {\n  const [auth, setAuth] = useState({loggedIn: false})\n  const [global, setGlobal_] = useState({})\n  const mounted = useRef(true)   \n\n  //Always update todoLists using this function only.\n  //It ensures todoLists always are tagged.\n  const setGlobal__ = (cb, todoLists = null, makeDeepCopy = false) => {\n    setGlobal_((prev) => {\n      var temp = todoLists\n      if (!temp)\n          temp = prev.todoLists\n\n      var todoLists_ = null\n      if (makeDeepCopy)\n          todoLists_ = JSON.parse(JSON.stringify(temp))\n      else\n          todoLists_ = temp\n\n      //If we have callback, process todoLists in it\n      cb(todoLists_)\n\n      //tag lists\n      tagLists(todoLists_)        \n      \n      //Update it in global\n      return {\n          ...prev, todoLists: todoLists_\n      }\n    })\n  }\n\nconst setGlobal = (cb, todoLists = null, makeDeepCopy = false) => {\n  if (mounted.current === true)\n    setGlobal__(cb, todoLists, makeDeepCopy)\n}\n\n  //Fetch and store todoList for the current user\n  useEffect(() => {\n    if (!auth.loggedIn) return\n    if (!global.todoLists) {\n      console.log('Hello Universe!')\n      requestAll()\n      .then(response => {\n          if (response.status != 200) { \n              //Notify the user about the error\n              return\n          }\n          return response.json()\n      })\n      .then(todoLists => {\n        console.log(todoLists)\n        //take the todoLists received in response, sort it out and then save it in global state\n        setGlobal(todoLists => todoLists, todoLists, false)\n      })\n      .catch(err => {\n        console.error(err)\n      })\n    }\n    return () => mounted.current = false\n}, [auth.loggedIn])\n\n  return (\n      <div className=\"App\">\n          <AuthContext.Provider value={[auth, setAuth]}>\n            <BrowserRouter>    \n              <Switch>\n                <Route exact path=\"/login\">\n                  <Login />\n                </Route>\n                <ProtectedRoute exact path='/'>\n                  <Home global={[global, setGlobal__]} />\n                </ProtectedRoute>\n                <ProtectedRoute exact path='/list/:id'>\n                  <List global={[global, setGlobal__]} />\n                </ProtectedRoute>\n                <ProtectedRoute exact path='/todo'>\n                  <Todo />\n                </ProtectedRoute>\n                <ProtectedRoute exact path='/logout'>\n                  <Logout />\n                </ProtectedRoute>\n                <ProtectedRoute exact path='/test'>\n                  <TestComponent global={[global, setGlobal__]}/>\n                </ProtectedRoute>\n              </Switch>\n            </BrowserRouter>\n          </AuthContext.Provider>\n      </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Mahi\\Repos\\todo-app\\src\\reportWebVitals.js",[],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\List.js",["99","100","101","102","103","104","105","106","107","108","109","110","111","112"],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Context.js",["113"],"import React, {useState} from 'react'\r\n\r\nexport const DataContext = React.createContext(null)\r\nexport const AuthContext = React.createContext(null)\r\n","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\utility\\APICalls.js",[],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\QuickButtons.js",["114"],"import React from 'react'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\n\r\nexport class ButtonC {\r\n    constructor(title, faIcon, onClick, dropdowns = []) {\r\n        this.title = title\r\n        this.faIcon = faIcon\r\n        this.dropdowns = dropdowns\r\n        this.onClick = onClick\r\n    }\r\n}\r\n\r\nexport const Button = ({ button }) => {\r\n    return (\r\n        <button onClick={button.onClick}>\r\n            {button.faIcon != null && <FontAwesomeIcon icon={button.faIcon} />} {button.title}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport const QuickButtons = ({buttons}) => {\r\n    return (\r\n        <div className=\"quick-buttons\">\r\n            {buttons.map((x) => {\r\n                if (x.dropdowns.length == 0) {\r\n                    return <Button button={x} />\r\n                }\r\n                else {\r\n                    return (\r\n                        <div className=\"dropdown\">\r\n                            <Button button={x} />\r\n                            <div className=\"dropdown-content\">\r\n                                {x.dropdowns.map((y) => {\r\n                                    return <Button button={y} />\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            })}\r\n        </div>\r\n    )\r\n}","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Login.js",["115","116"],"import React, {useContext} from 'react'\r\nimport {GoogleLogin} from 'react-google-login'\r\nimport {AuthContext} from './Context'\r\nimport {useHistory} from 'react-router-dom'\r\n\r\nconst Login = _ => {\r\n    const AUTH_ENDPOINT = \"http://localhost:5001/api/auth/google\"\r\n    //const [data, setData] = useContext(DataContext)\r\n    const [auth, setAuth] = useContext(AuthContext)\r\n\r\n    const history = useHistory()\r\n    //Verify idToken with the server, login user if green flagged, otherwise throw error\r\n    const verifyToken = async googleLoginResponse => {\r\n        const res = await fetch(AUTH_ENDPOINT, {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                idToken: googleLoginResponse.tokenId\r\n            }),\r\n            headers: {\r\n                'Access-Control-Allow-Origin':'http://localhost:3000/',\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            credentials: 'include'\r\n        })\r\n        //If authentication successful, mark user loggedIn in auth\r\n        if (res.status == 200) {\r\n            const userConfig = await res.json()\r\n            setAuth((prev) => {\r\n                return {\r\n                    ...prev, ...userConfig, loggedIn: true\r\n                }\r\n            })\r\n            //Redirect the user to Home\r\n            var redirectPath = '/'\r\n            if (history.location && history.location.state && history.location.state.from) {\r\n                console.log(history.location.state)\r\n                redirectPath = history.location.state.from\r\n                history.replace('/login', null)\r\n            }\r\n            history.push({\r\n                pathname: redirectPath\r\n            })\r\n        }\r\n        else {\r\n            //If authentication fails, notify the user!\r\n            //!TODO! Create a Notification component \r\n            console.log(\"Authentication failed at back-end layer!\")\r\n        }\r\n    }\r\n\r\n    const onSuccess = async googleLoginResponse => {\r\n        //Verify token with the server\r\n        verifyToken(googleLoginResponse)\r\n    }\r\n\r\n    const onFailure = async _ => {\r\n        setAuth(prev => {\r\n            return {\r\n                ...prev, loggedIn: false\r\n            }\r\n        })\r\n    }\r\n    \r\n    return (\r\n        <div className=\"login\">\r\n            <GoogleLogin\r\n                clientId={process.env.REACT_APP_CLIENT_ID}\r\n                isSignedIn={true}\r\n                buttonText=\"Login with Google\"\r\n                onSuccess={onSuccess}\r\n                onFailure={onFailure}\r\n                cookiePolicy={'single_host_origin'}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Home.js",["117","118","119","120","121","122","123"],"import React, {useEffect, useState, useContext, useRef} from 'react'\r\nimport {faFile, faSort} from '@fortawesome/free-solid-svg-icons'\r\nimport {requestAll} from './utility/APICalls'\r\nimport Nav from './Nav'\r\nimport {QuickButtons, ButtonC} from './QuickButtons'\r\nimport LiList from './UlList/LiList'\r\nimport CreateListForm from './CreateListForm'\r\nimport {reportType} from './utility/Definations'\r\nimport {requestUpdateListSortingConfig} from './utility/APICalls'\r\nimport {AuthContext} from './Context'\r\nimport Notification from './Notification'\r\n\r\nconst Home = ({global: [global, setGlobal__]}) => {\r\n    const [state, setState] = useState({createListFormEnabled: false})\r\n    const mounted = useRef(true)\r\n    const [error, setError_] = useState('')\r\n    const errorTimeout = 10000 //10 seconds\r\n    const sortType = {\r\n        ALPHABETICAL: 'title',\r\n        PENDING_ITEMS: 'pendingCount',\r\n        HIGH_PRIORITY_ITEMS: 'highPriorityCount',\r\n        CREATED_AT: 'created_at'\r\n    }\r\n    const sortingOrder = {\r\n        ASC: 'asc',\r\n        DESC: 'desc'\r\n    }\r\n    const [authContext, setAuthContext] = useContext(AuthContext)\r\n    \r\n    //Event handler for \"New\" list button\r\n    const toggleForm = _ => {\r\n        if (!mounted.current) return\r\n        setState((prev) => {\r\n            return {\r\n                ...prev, createListFormEnabled: !prev.createListFormEnabled\r\n            }\r\n        })\r\n    }\r\n\r\n    const setGlobal = (cb, todoLists = null, makeDeepCopy = false) => {\r\n        if (mounted.current)\r\n            setGlobal__(cb, todoLists, makeDeepCopy)\r\n    }\r\n\r\n    const setError = err => {\r\n        if (mounted.current)\r\n            setError_(() => err)\r\n    }\r\n\r\n    //Handles subcomponent response received from remote endpoint\r\n    //for reportT, Refer to reportType\r\n    //remoteResponse, {status: number, json: Obj}\r\n    const subComponentReportHandler = (reportT, remoteResponse) => {\r\n        if (remoteResponse.status != 200) {\r\n            setError(`status code: ${remoteResponse.status}, error: ${remoteResponse.error}`)\r\n            return\r\n        }\r\n        switch(reportT) {\r\n            case reportType.CREATE:\r\n                setGlobal(todoLists => {\r\n                    todoLists.push(remoteResponse.json)\r\n                    listSortingCallback(todoLists, authContext.sort)\r\n                }, null, true)\r\n                toggleForm()\r\n                break\r\n            case reportType.UPDATE:\r\n                //remoteResponse.json is the updated list\r\n                //Replace the todoList with the updated one in global\r\n                setGlobal(todoLists => {\r\n                    var index = todoLists.findIndex(x => x._id == remoteResponse.json._id)\r\n                    if (index != -1)\r\n                        todoLists[index] = remoteResponse.json\r\n                    listSortingCallback(todoLists, authContext.sort)\r\n                }, null, true)\r\n                break\r\n            case reportType.DELETE:\r\n                //remoteResponse.json._id indicates id of the list to be deleted\r\n                setGlobal(todoLists => {\r\n                    const index = todoLists.findIndex(x => x._id === remoteResponse.json.id)\r\n                    if (index != -1)\r\n                        todoLists.splice(index, 1)\r\n                }, null, true)\r\n                break\r\n        }\r\n    }\r\n\r\n    //Just a wrapper function to compare todoLists based on the specified properpty\r\n    const sortByProperty = (a, b, property) => {\r\n        if (a[property] === b[property]) return 0\r\n        if (a[property] > b[property]) return -1\r\n        return 1\r\n    }\r\n\r\n    //Sorts the todoLists based on the sorting preference 'criteria'\r\n    const listSortingCallback = (todoLists, criteria) => {\r\n        const criteria_ = criteria.split('.')\r\n        if (criteria_[1] === sortingOrder.DESC) {\r\n            todoLists.sort((a, b) => sortByProperty(a, b, criteria_[0]))\r\n        }\r\n        else {\r\n            todoLists.sort((a, b) => (-1 * sortByProperty(a, b, criteria_[0])))\r\n        }\r\n    } \r\n\r\n    //Sort the list, refer to sortType enum for available sorting options\r\n    const sort = criteria => {\r\n        const prevCriteria = authContext.sort.split('.')\r\n        if (criteria === prevCriteria[0]) {\r\n            //Opposite sorting order\r\n            if (prevCriteria[1] === sortingOrder.DESC) {\r\n                criteria += `.${sortingOrder.ASC}`\r\n            }\r\n            else {\r\n                criteria += `.${sortingOrder.DESC}`\r\n            }\r\n        } else {\r\n            //Otherwise default desc order\r\n            criteria += `.${sortingOrder.DESC}`\r\n        }\r\n\r\n        requestUpdateListSortingConfig(criteria)\r\n        .then(response => {\r\n            if (response.status != 200) {\r\n                //throw error over here\r\n                setError(`status code: ${response.status}, error: ${response.error}`)\r\n\r\n            }\r\n            else {\r\n                setAuthContext(prev => {\r\n                    return {\r\n                        ...prev, sort: criteria\r\n                    }\r\n                })\r\n\r\n                setGlobal(todoLists => listSortingCallback(todoLists, criteria), null, false)\r\n            }\r\n        })\r\n    }\r\n\r\n    //Buttons, we will pass to \"QuickButtons\" component\r\n    const buttons = [\r\n                        new ButtonC(\"New\", faFile, toggleForm),\r\n                        new ButtonC(\"Sort\", faSort, null, [\r\n                            new ButtonC(\"Alphabetical\", null, () => sort(sortType.ALPHABETICAL)),\r\n                            new ButtonC(\"Pending items\", null, () => sort(sortType.PENDING_ITEMS)),\r\n                            new ButtonC(\"High-priority items\", null, () => sort(sortType.HIGH_PRIORITY_ITEMS)),\r\n                            new ButtonC(\"Date created\", null, () => sort(sortType.CREATED_AT))\r\n                        ])\r\n                    ]\r\n\r\n    //Fetch and store todoList for the current user\r\n    useEffect(() => {\r\n        if (!global.todoLists) {\r\n            requestAll()\r\n            .then(response => {\r\n                // if (response.status != 200) { \r\n                //     throw new Error(`Error occured while fetching data! ${response.status}`)\r\n                // }\r\n                console.log(response.status)\r\n                return response.json()\r\n            })\r\n            .then(todoLists => {\r\n                //take the todoLists received in response, sort it out and then save it in global state\r\n                setGlobal(todoLists => listSortingCallback(todoLists, authContext.sort), todoLists, false)\r\n            }) \r\n            // .catch(err => {\r\n            //     setError(err)\r\n            //     return\r\n            // })\r\n        }\r\n        else {\r\n            var todoLists = global.todoLists\r\n            setGlobal(todoLists => listSortingCallback(todoLists, authContext.sort), todoLists, false)\r\n        }\r\n\r\n        return () => mounted.current = false\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            <Notification message={error} timeout={errorTimeout} />\r\n            <Nav />\r\n            <div className=\"content\">\r\n                <div className=\"title\">\r\n                    My Lists\r\n                </div>\r\n                <QuickButtons buttons={buttons}/>\r\n                <br />\r\n                {state.createListFormEnabled && <CreateListForm reportParent={subComponentReportHandler}/>}\r\n                <div className=\"ul-list\">\r\n                    {!global.todoLists ? \r\n                    <>Please wait while we are loading your data</> : \r\n                    global.todoLists.map((list) => <LiList key={list._id} list={list} reportParent={subComponentReportHandler} />)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Nav.js",[],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\UlList\\LiList.js",["124","125"],"import React, {useState} from 'react'\r\nimport {useHistory} from 'react-router-dom'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faExclamation, faExclamationTriangle, faTrashAlt, faEdit, faSave} from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport {requestDelete, requestUpdate} from '../utility/APICalls'\r\nimport {reportType} from '../utility/Definations'\r\n\r\nconst LiList = ({list, reportParent}) => {\r\n    const history = useHistory()\r\n    const [state, setState] = useState({rename: false, newTitle: \"\"})\r\n\r\n    const clicked = _ => {\r\n        history.push({\r\n            state: list,\r\n            pathname: `/list/${list._id}`\r\n        })\r\n    }\r\n\r\n    const deleteSelf = event => {\r\n        event.stopPropagation()\r\n        requestDelete(list._id)\r\n        .then(response => {\r\n            if (response.status != 200) {\r\n                reportParent(reportType.DELETE, {status: response.status})\r\n            }\r\n            else {\r\n                reportParent(reportType.DELETE, {status: response.status, json: {id: list._id}})\r\n            }\r\n        })\r\n    }\r\n\r\n    const toggleRename = event => {\r\n        //Check for event, because it is also called from renameSelf, which does not generates event\r\n        if (event) event.stopPropagation()\r\n        //state.newTitle has to be in sync with the current list.title\r\n        setState((prev) => {\r\n            return {\r\n                ...prev, rename: !prev.rename, newTitle: list.title\r\n            }\r\n        })\r\n    }\r\n\r\n    //triggered by onChange handler of title <input>\r\n    const titleChanged = event => {\r\n        setState((prev) => {\r\n            return {\r\n                ...prev, newTitle: event.target.value\r\n            }\r\n        })\r\n    }\r\n\r\n    const renameSelf = event => {\r\n        event.stopPropagation()\r\n        requestUpdate(list._id, state.newTitle)\r\n        .then(response => {\r\n            if (response.status != 200) {\r\n                reportParent(reportType.UPDATE, {status: response.status})\r\n                throw new Error(`${response.text}`)\r\n            }\r\n            return response.json()\r\n        })\r\n        .then(todoList => {\r\n            reportParent(reportType.UPDATE, {status: 200, json: todoList})\r\n        })\r\n        .catch(err => console.error(err))\r\n        toggleRename()\r\n    }\r\n\r\n    return (\r\n        <div className=\"li-list\" onClick={clicked}>\r\n            {state.rename ?\r\n            <span onClick={event => event.stopPropagation()}>\r\n                <input type=\"text\" className=\"li-title-rename\" onChange={titleChanged} value={state.newTitle} />\r\n                <FontAwesomeIcon onClick={renameSelf} className=\"fa-rename\" icon={faSave} />    \r\n            </span> :\r\n            <span onClick={event => event.stopPropagation()}>\r\n                {list.title}     \r\n                <FontAwesomeIcon onClick={toggleRename} className=\"fa-rename\" icon={faEdit} />\r\n            </span>}\r\n            <span className=\"li-list-right\">\r\n                <span className=\"indicator-group\">\r\n                    <span className=\"indicator\">\r\n                        <FontAwesomeIcon className=\"danger-text indicator-fa\" icon={faExclamation} />\r\n                        <span className=\"indicator-count\">{list.highPriorityCount}</span>\r\n                    </span>\r\n                    <span className=\"indicator\">\r\n                        <FontAwesomeIcon className=\"warning-text indicator-fa\" icon={faExclamationTriangle} />\r\n                        <span className=\"indicator-count\">{list.pendingCount}</span>\r\n                    </span>\r\n                </span>\r\n                <span className=\"indicator-group\">\r\n                    <span className=\"indicator\">\r\n                        <FontAwesomeIcon onClick={deleteSelf} className=\"indicator-fa\" icon={faTrashAlt} />\r\n                    </span>\r\n                </span>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LiList","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\UlTodo\\LiTodo.js",["126","127","128","129","130"],"import React, {useState} from 'react'\r\nimport {useHistory} from 'react-router-dom'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faClock, faEdit, faTrash, faCheckCircle, faTimesCircle, faTimes} from '@fortawesome/free-solid-svg-icons'\r\n// import {faTimesCircle} from '@fortawesome/free-regular-svg-icons'\r\nimport {requestTodoUpdate, requestTodoDelete, requestTodoRecurringUpdate} from '../utility/APICalls'\r\nimport {reportType, todoType, todoRecurringActivity} from '../utility/Definations'\r\n\r\nconst LiTodo = ({todoListId, todo, reportParent}) => {\r\n    const [state, setState] = useState({detailedView: false})\r\n    const history = useHistory()\r\n    const msInHours = 3600000\r\n    const liTodoClass = `li-todo ${todo.priority}-priority`\r\n\r\n    var age = (new Date() - new Date(todo.created_at)) / msInHours\r\n    if (age > 24 ) { \r\n        age /= 24\r\n        age = age.toFixed(2)\r\n        age = age.toString() + \" days\"\r\n    }\r\n    else {\r\n        age = age.toFixed(2)\r\n        age = age.toString() + \" hours\"\r\n    }\r\n\r\n    const toggleDetails = () => {\r\n        setState((prev) => { return {...prev, detailedView: !prev.detailedView} })\r\n    }\r\n\r\n    const done = (event) => {\r\n        event.stopPropagation()\r\n        requestTodoUpdate(todoListId, {...todo, compeleted: !todo.compeleted})\r\n        .then(response => {\r\n            if (response.status != 200) {\r\n                reportParent(reportType.UPDATE, {status: response.status})\r\n                throw new Error('Error occured while updating Todo!')\r\n            }\r\n            return response.json()\r\n        })\r\n        .then(updatedTodo => {\r\n            reportParent(reportType.UPDATE, {status: 200, json: updatedTodo})\r\n        })\r\n    }\r\n\r\n    const deleteSelf = event => {\r\n        event.stopPropagation()\r\n        requestTodoDelete(todoListId, todo._id)\r\n        .then(response => {\r\n            if (response.status != 200) {\r\n                reportParent(reportType.DELETE, {status: response.status})\r\n                throw new Error('Error occured while deleteing Todo!')\r\n            }\r\n            else {\r\n                reportParent(reportType.DELETE, {status: 200, json: {_id: todo._id}})\r\n            }\r\n        })\r\n    }\r\n\r\n    const updateRecurringActivity = (event, recurringActivity) => {\r\n        event.stopPropagation()\r\n        const todo_ = JSON.parse(JSON.stringify(todo))\r\n        todo_.recurring_activity.push(recurringActivity)\r\n        requestTodoUpdate(todoListId, todo_)\r\n        .then(response => {\r\n            if (response.status != 200) {\r\n                reportParent(reportType.UPDATE, {status: response.status})\r\n                throw new Error('Error occured while updating Todo!')\r\n            }\r\n            else {\r\n                reportParent(reportType.UPDATE, {status: 200, json: {...todo_}})\r\n            }\r\n        })\r\n    }\r\n\r\n    const editSelf = event => {\r\n        event.stopPropagation()\r\n        history.push(`/todo?listId=${todoListId}`, {todo})\r\n    }\r\n\r\n    return (\r\n        <div className={liTodoClass} onDoubleClick={toggleDetails}>\r\n            <div className=\"li-todo-basic\">\r\n                <span>\r\n                    <input type=\"checkbox\" checked={todo.compeleted} onClick={done} readOnly/>\r\n                    <span className='li-todo-title' style={todo.compeleted ? {textDecoration: 'line-through'} : {}}>\r\n                        { todo.title }\r\n                    </span>\r\n                </span>\r\n\r\n                {/* Recurring todo only! ---START--- */}\r\n                {todo.type === todoType.RECURRING && todo.recurring_activity &&\r\n                    <span className='recurring-todo-status'>\r\n                        {todo.recurring_activity.map((x, index) => x === true ? <FontAwesomeIcon key={index} className='success-text' icon={faCheckCircle} /> : <FontAwesomeIcon className='danger-text' icon={faTimesCircle} />)}\r\n                    </span>\r\n                }\r\n                {/* Recurring todo only! ---END--- */}\r\n\r\n                <span className=\"li-todo-right\">\r\n                    <span className=\"indicator\">\r\n                        <FontAwesomeIcon className=\"fa-outline\" icon={faClock} />\r\n                        <span className=\"indicator-count\">{age}</span>\r\n                    </span>\r\n                    {/* Recurring todo only! ---START--- */}\r\n                    {todo.type === todoType.RECURRING &&\r\n                        <span className='indicator'>\r\n                            <button className='recurring-todo-button success' onClick={(event) => updateRecurringActivity(event, todoRecurringActivity.POSITIVE)}>\r\n                                <FontAwesomeIcon icon={faCheckCircle} />\r\n                            </button>\r\n                            <button className='recurring-todo-button danger' onClick={(event) => updateRecurringActivity(event, todoRecurringActivity.NEGATIVE)}>\r\n                                <FontAwesomeIcon icon={faTimesCircle} />\r\n                            </button>\r\n                        </span>\r\n                    }\r\n                    {/* Recurring todo only! ---END--- */}\r\n                    <span className=\"indicator\">\r\n                        <FontAwesomeIcon icon={faEdit} onClick={editSelf} />\r\n                    </span>\r\n                    <span className=\"indicator\">\r\n                        <FontAwesomeIcon icon={faTrash} onClick={deleteSelf} />\r\n                    </span>\r\n                </span>\r\n            </div>\r\n            {state.detailedView && \r\n                <div className=\"li-todo-detailed\">\r\n                    {todo.desc}\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LiTodo",["131","132"],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Todo.js",["133","134"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Nav from './Nav'\r\nimport {QuickButtons, ButtonC} from './QuickButtons'\r\nimport {isAlphaNumeric, isString} from './utility/Utils'\r\n\r\nconst TodoEdit = () => {\r\n    //priorities enum\r\n    const mounted = useRef(true)\r\n    const priorities = [\"Low\", \"Moderate\", \"High\"]\r\n    const types = ['Regular', 'Recurring']\r\n    const property = {\r\n        TITLE: {\r\n            name: 'title',\r\n            maxLength: 15\r\n        },\r\n        DESC: {\r\n            name: 'desc',\r\n            maxLength: 100\r\n        },\r\n        PRIORITY: {\r\n            name: 'priority',\r\n            maxLength: null\r\n        },\r\n        TYPE: {\r\n            name: 'type',\r\n            maxLength: null\r\n        }\r\n    }\r\n    //local state, required for controlled components\r\n    const [state, setState] = useState({\r\n        title: \"\", desc: \"\", priority: \"low\", type: 'regular'\r\n    })   \r\n    const [error, setError] = useState({title: '', desc: '', priority: ''})\r\n    const history = useHistory()\r\n    const [todoListId, setTodoListId] = useState(null)\r\n\r\n    const saveTodo = () => {\r\n        //transfer the todo as state to /list/todoListId\r\n        history.push(`/list/${todoListId}`, {todo: {...state}})\r\n    }\r\n\r\n    //Buttons for our form\r\n    const buttons = [\r\n        new ButtonC(state._id ? \"Save\" : \"Create\", null, saveTodo),\r\n        new ButtonC(\"Cancel\", null, () => history.go(-1))\r\n    ]   \r\n\r\n    useEffect(() => {\r\n        //Extract todoListId from URL\r\n        setTodoListId(() => history.location.search.split('=')[1])\r\n        if (history.location.state && history.location.state.todo) {\r\n            if (!mounted.current) return null\r\n            setState(() => history.location.state.todo)\r\n        }\r\n\r\n        return () => mounted.current = false\r\n    }, [])\r\n\r\n    const propertyChanged = (property_, event) => {\r\n        if (property_.maxLength != null && event.target.value.length > property_.maxLength) {      \r\n            setError(prev => {\r\n                prev[property_.name] = `Exceeding max character limit of ${property_.maxLength}!`\r\n                return {\r\n                    ...prev\r\n                }\r\n            })\r\n            return null\r\n        }\r\n        \r\n        if (!isAlphaNumeric(event.target.value)) {\r\n            setError(prev => {\r\n                prev[property_.name] = `Only alphanumeric values accepted!`\r\n                return {\r\n                    ...prev\r\n                }\r\n            })\r\n            return null\r\n        }\r\n\r\n        setError(prev => {\r\n            prev[property_.name] = ''\r\n            return {\r\n                ...prev\r\n            }\r\n        })\r\n        if (!mounted.current) return null\r\n        setState(prev => {\r\n            prev[property_.name] = event.target.value\r\n            return {\r\n                ...prev\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            <Nav />\r\n            <div className=\"content\">\r\n                <div className=\"title\">\r\n                    {state.title}\r\n                </div>\r\n                <br />\r\n                <div className=\"todo-form\">\r\n                    <div className=\"form-row\">\r\n                        <div className=\"input-group\">\r\n                            <label>Type</label>\r\n                            <select value={state.type} onChange={(event) => propertyChanged(property.TYPE, event)} >\r\n                                {\r\n                                    types.map((x, index) => {\r\n                                        return <option key={index} value={x.toLowerCase()}>{x}</option>\r\n                                    })\r\n                                }\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"input-group\">\r\n                            <label>Title</label>\r\n                            <input type=\"text\" value={state.title} onChange={(event) => propertyChanged(property.TITLE, event)} />\r\n                            <span className='input-error'>{error.title}</span>\r\n                        </div>\r\n                        <div className=\"input-group\">\r\n                            <label>Priority</label>\r\n                            <select value={state.priority} onChange={(event) => propertyChanged(property.PRIORITY, event)} >\r\n                                {\r\n                                    priorities.map((x, index) => {\r\n                                        return <option key={index} value={x.toLowerCase()}>{x}</option>\r\n                                    })\r\n                                }\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"input-group\">\r\n                        <label>Desc</label>\r\n                        <textarea onChange={(event) => propertyChanged(property.DESC, event)} value={state.desc} />\r\n                        <span className='input-error'>{error.desc}</span>\r\n                    </div>\r\n                    <QuickButtons buttons={buttons} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoEdit","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\CreateListForm.js",["135"],"import React, {useState} from 'react'\r\nimport {faSave} from '@fortawesome/free-solid-svg-icons'\r\nimport {requestCreate} from './utility/APICalls'\r\nimport {reportType} from './utility/Definations'\r\nimport {ButtonC, Button} from './QuickButtons'\r\nimport {isAlphaNumeric} from './utility/Utils'\r\n\r\n//reportParent => check out the func defination\r\nconst CreateListForm = ({reportParent}) => {\r\n    const [state, setState] = useState({title: \"\"})\r\n    \r\n    const createList = () => {\r\n        if (!isAlphaNumeric(state.title)) {\r\n            //Notify the user!\r\n            return\r\n        }\r\n        requestCreate(state.title)\r\n        .then(response => {\r\n            if (response.status != 200) {\r\n                //Notify the user of error\r\n                reportParent(reportType.CREATE, {status: response.status}) \r\n                throw new Error(`${response.text}`)\r\n            }\r\n            return response.json()\r\n        })\r\n        .then((todoList) => {\r\n            //Pass this todoList back to the Home component\r\n            //Global will be updated there\r\n            //Reasoning behind this is, CreateListForm is kind of a 'sub-component', it must report to its Parent component in case of any global update\r\n            console.log(todoList)\r\n            reportParent(reportType.CREATE, {status: 200, json: todoList}) \r\n        })\r\n        .catch(err => {\r\n            console.error(err)\r\n        })\r\n    }\r\n\r\n    //On title input change update the state, since the input field is a Controlled Component\r\n    const titleChanged = event => {\r\n        setState((prev) => ({ ...prev, title: event.target.value }))\r\n    }\r\n\r\n    const buttonData = new ButtonC(\"Save\", faSave, createList)\r\n\r\n    return (\r\n        <div className=\"create-list\">\r\n            <div className=\"form-title\">Create a new list</div>\r\n            <div className=\"input-group inline\">\r\n                <label>Title</label>\r\n                <input type=\"text\" value={state.title} onChange={titleChanged} />\r\n                <Button button={buttonData} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateListForm","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\utility\\Utils.js",[],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\utility\\Definations.js",[],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\ProtectedRoute.js",["136"],"import {useContext} from 'react'\r\nimport {Redirect, Route} from 'react-router-dom'\r\nimport { AuthContext } from './Context'\r\nimport {useHistory} from 'react-router-dom'\r\n\r\nconst ProtectedRoute = ({path, children, ...restProps}) => {\r\n    const [auth, setAuth] = useContext(AuthContext)\r\n    const history = useHistory()\r\n    const pathname = history.location.pathname\r\n\r\n    return (<>\r\n        {auth.loggedIn ? \r\n        <Route path={pathname} {...restProps}>\r\n            {children}\r\n        </Route>\r\n        :\r\n        <Redirect to={{pathname: '/login', state: {from: pathname}}} />\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProtectedRoute","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Logout.js",["137","138","139"],"import React from 'react'\r\nimport { GoogleLogout } from 'react-google-login';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Logout = () => {\r\n    const history = useHistory()\r\n    const logout = () => {\r\n        history.push('/')\r\n    }\r\n\r\n    return (\r\n        \"\"\r\n    )\r\n}\r\n\r\nexport default Logout","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Notification.js",["140","141"],"import React, {useEffect, useState, useRef} from 'react'\r\n\r\nconst Notification = (prop) => {\r\n    const mounted = useRef(true)\r\n    const [message, setMessage_] = useState(null)\r\n    const [hide, setHide_] = useState(false)\r\n\r\n    const setMessage = (msg) => {\r\n        if (mounted.current === true)\r\n            setMessage_(() => msg)\r\n    }\r\n\r\n    const setHide = (shouldHide) => {\r\n        if (mounted.current === true)\r\n            setHide_(() => shouldHide)\r\n    }\r\n\r\n    const objectToString = (obj, preText = '') => {\r\n        var msg = ''\r\n        msg += `\\t${preText}{${preText}\\n`\r\n        for (const key in obj) {\r\n            var val = obj[key]\r\n            if (typeof val === 'object') {\r\n                val = '\\n' + objectToString(val, preText + '\\t')\r\n            }\r\n            msg += `\\t${preText}${key}: ${val}\\n`\r\n        }\r\n        msg += `\\t${preText}}`\r\n        return msg\r\n    }\r\n\r\n    useEffect(() => {\r\n        var msg = prop.message\r\n        if (typeof prop.message === 'object') {\r\n            msg = objectToString(prop.message)\r\n        }\r\n        setMessage(msg)\r\n        console.log(msg)\r\n        setTimeout(() => {\r\n            setHide(true)\r\n        }, prop.timeout)\r\n\r\n        return () => mounted.current = false\r\n    }, [prop.message])\r\n\r\n    if (!message) return null\r\n    if (hide) return null\r\n\r\n    return (\r\n        <div className='notification'>\r\n            {message}\r\n            <img src='/loader.gif' height='32' width='32' />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification",{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":4,"column":39,"nodeType":"148","messageId":"149","endLine":4,"endColumn":47},{"ruleId":"146","severity":1,"message":"150","line":4,"column":49,"nodeType":"148","messageId":"149","endLine":4,"endColumn":59},{"ruleId":"146","severity":1,"message":"151","line":6,"column":8,"nodeType":"148","messageId":"149","endLine":6,"endColumn":20},{"ruleId":"152","severity":1,"message":"153","line":71,"column":31,"nodeType":"154","messageId":"155","endLine":71,"endColumn":33},{"ruleId":"156","severity":1,"message":"157","line":87,"column":4,"nodeType":"158","endLine":87,"endColumn":19,"suggestions":"159"},{"ruleId":"152","severity":1,"message":"160","line":28,"column":50,"nodeType":"154","messageId":"155","endLine":28,"endColumn":52},{"ruleId":"152","severity":1,"message":"153","line":54,"column":35,"nodeType":"154","messageId":"155","endLine":54,"endColumn":37},{"ruleId":"161","severity":1,"message":"162","line":58,"column":9,"nodeType":"163","messageId":"164","endLine":82,"endColumn":10},{"ruleId":"152","severity":1,"message":"160","line":61,"column":62,"nodeType":"154","messageId":"155","endLine":61,"endColumn":64},{"ruleId":"152","severity":1,"message":"160","line":68,"column":72,"nodeType":"154","messageId":"155","endLine":68,"endColumn":74},{"ruleId":"152","severity":1,"message":"160","line":69,"column":98,"nodeType":"154","messageId":"155","endLine":69,"endColumn":100},{"ruleId":"165","severity":1,"message":"166","line":70,"column":78,"nodeType":"167","messageId":"168","endLine":70,"endColumn":79,"fix":"169"},{"ruleId":"152","severity":1,"message":"160","line":76,"column":72,"nodeType":"154","messageId":"155","endLine":76,"endColumn":74},{"ruleId":"152","severity":1,"message":"160","line":77,"column":98,"nodeType":"154","messageId":"155","endLine":77,"endColumn":100},{"ruleId":"152","severity":1,"message":"153","line":91,"column":37,"nodeType":"154","messageId":"155","endLine":91,"endColumn":39},{"ruleId":"152","severity":1,"message":"153","line":109,"column":37,"nodeType":"154","messageId":"155","endLine":109,"endColumn":39},{"ruleId":"152","severity":1,"message":"160","line":148,"column":48,"nodeType":"154","messageId":"155","endLine":148,"endColumn":50},{"ruleId":"152","severity":1,"message":"153","line":177,"column":33,"nodeType":"154","messageId":"155","endLine":177,"endColumn":35},{"ruleId":"156","severity":1,"message":"170","line":233,"column":8,"nodeType":"158","endLine":233,"endColumn":26,"suggestions":"171"},{"ruleId":"146","severity":1,"message":"172","line":1,"column":16,"nodeType":"148","messageId":"149","endLine":1,"endColumn":24},{"ruleId":"152","severity":1,"message":"160","line":25,"column":40,"nodeType":"154","messageId":"155","endLine":25,"endColumn":42},{"ruleId":"146","severity":1,"message":"173","line":9,"column":12,"nodeType":"148","messageId":"149","endLine":9,"endColumn":16},{"ruleId":"152","severity":1,"message":"160","line":26,"column":24,"nodeType":"154","messageId":"155","endLine":26,"endColumn":26},{"ruleId":"152","severity":1,"message":"153","line":54,"column":35,"nodeType":"154","messageId":"155","endLine":54,"endColumn":37},{"ruleId":"161","severity":1,"message":"162","line":58,"column":9,"nodeType":"163","messageId":"164","endLine":84,"endColumn":10},{"ruleId":"152","severity":1,"message":"160","line":70,"column":64,"nodeType":"154","messageId":"155","endLine":70,"endColumn":66},{"ruleId":"152","severity":1,"message":"153","line":71,"column":31,"nodeType":"154","messageId":"155","endLine":71,"endColumn":33},{"ruleId":"152","severity":1,"message":"153","line":80,"column":31,"nodeType":"154","messageId":"155","endLine":80,"endColumn":33},{"ruleId":"152","severity":1,"message":"153","line":123,"column":33,"nodeType":"154","messageId":"155","endLine":123,"endColumn":35},{"ruleId":"156","severity":1,"message":"174","line":177,"column":8,"nodeType":"158","endLine":177,"endColumn":10,"suggestions":"175"},{"ruleId":"152","severity":1,"message":"153","line":24,"column":33,"nodeType":"154","messageId":"155","endLine":24,"endColumn":35},{"ruleId":"152","severity":1,"message":"153","line":57,"column":33,"nodeType":"154","messageId":"155","endLine":57,"endColumn":35},{"ruleId":"146","severity":1,"message":"176","line":4,"column":65,"nodeType":"148","messageId":"149","endLine":4,"endColumn":72},{"ruleId":"146","severity":1,"message":"177","line":6,"column":47,"nodeType":"148","messageId":"149","endLine":6,"endColumn":73},{"ruleId":"152","severity":1,"message":"153","line":34,"column":33,"nodeType":"154","messageId":"155","endLine":34,"endColumn":35},{"ruleId":"152","severity":1,"message":"153","line":49,"column":33,"nodeType":"154","messageId":"155","endLine":49,"endColumn":35},{"ruleId":"152","severity":1,"message":"153","line":65,"column":33,"nodeType":"154","messageId":"155","endLine":65,"endColumn":35},{"ruleId":"142","replacedBy":"178"},{"ruleId":"144","replacedBy":"179"},{"ruleId":"146","severity":1,"message":"180","line":5,"column":25,"nodeType":"148","messageId":"149","endLine":5,"endColumn":33},{"ruleId":"156","severity":1,"message":"181","line":58,"column":8,"nodeType":"158","endLine":58,"endColumn":10,"suggestions":"182"},{"ruleId":"152","severity":1,"message":"153","line":19,"column":33,"nodeType":"154","messageId":"155","endLine":19,"endColumn":35},{"ruleId":"146","severity":1,"message":"183","line":7,"column":18,"nodeType":"148","messageId":"149","endLine":7,"endColumn":25},{"ruleId":"146","severity":1,"message":"184","line":1,"column":8,"nodeType":"148","messageId":"149","endLine":1,"endColumn":13},{"ruleId":"146","severity":1,"message":"185","line":2,"column":10,"nodeType":"148","messageId":"149","endLine":2,"endColumn":22},{"ruleId":"146","severity":1,"message":"186","line":7,"column":11,"nodeType":"148","messageId":"149","endLine":7,"endColumn":17},{"ruleId":"156","severity":1,"message":"187","line":44,"column":8,"nodeType":"158","endLine":44,"endColumn":22,"suggestions":"188"},{"ruleId":"189","severity":1,"message":"190","line":52,"column":13,"nodeType":"191","endLine":52,"endColumn":61},"no-native-reassign",["192"],"no-negated-in-lhs",["193"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'useHistory' is defined but never used.","'Notification' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'global.todoLists' and 'setGlobal'. Either include them or remove the dependency array.","ArrayExpression",["194"],"Expected '===' and instead saw '=='.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","rest-spread-spacing","Unexpected whitespace after spread property operator.","ExperimentalSpreadProperty","unexpectedWhitespace",{"range":"195","text":"196"},"React Hook useEffect has missing dependencies: 'history', 'id', 'processTodo', 'setGlobal', 'sortTodosCallback', and 'state.sort'. Either include them or remove the dependency array.",["197"],"'useState' is defined but never used.","'auth' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'authContext.sort', 'global.todoLists', 'listSortingCallback', and 'setGlobal'. Either include them or remove the dependency array.",["198"],"'faTimes' is defined but never used.","'requestTodoRecurringUpdate' is defined but never used.",["192"],["193"],"'isString' is defined but never used.","React Hook useEffect has missing dependencies: 'history.location.search' and 'history.location.state'. Either include them or remove the dependency array.",["199"],"'setAuth' is assigned a value but never used.","'React' is defined but never used.","'GoogleLogout' is defined but never used.","'logout' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'objectToString' and 'prop.timeout'. Either include them or remove the dependency array.",["200"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"201","fix":"202"},[2980,2981],"",{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},"Update the dependencies array to be: [auth.loggedIn, global.todoLists, setGlobal]",{"range":"211","text":"212"},"Update the dependencies array to be: [global.todoLists, history, id, processTodo, setGlobal, sortTodosCallback, state.sort]",{"range":"213","text":"214"},"Update the dependencies array to be: [authContext.sort, global.todoLists, listSortingCallback, setGlobal]",{"range":"215","text":"216"},"Update the dependencies array to be: [history.location.search, history.location.state]",{"range":"217","text":"218"},"Update the dependencies array to be: [objectToString, prop.message, prop.timeout]",{"range":"219","text":"220"},[2541,2556],"[auth.loggedIn, global.todoLists, setGlobal]",[9096,9114],"[global.todoLists, history, id, processTodo, setGlobal, sortTodosCallback, state.sort]",[6939,6941],"[authContext.sort, global.todoLists, listSortingCallback, setGlobal]",[1865,1867],"[history.location.search, history.location.state]",[1256,1270],"[objectToString, prop.message, prop.timeout]"]