[{"C:\\Users\\Mahi\\Repos\\todo-app\\src\\index.js":"1","C:\\Users\\Mahi\\Repos\\todo-app\\src\\App.js":"2","C:\\Users\\Mahi\\Repos\\todo-app\\src\\reportWebVitals.js":"3","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\List.js":"4","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Context.js":"5","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\utility\\APICalls.js":"6","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\QuickButtons.js":"7","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Login.js":"8","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Home.js":"9","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Nav.js":"10","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\UlList\\LiList.js":"11","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\UlTodo\\LiTodo.js":"12","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Todo.js":"13","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\CreateListForm.js":"14","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\utility\\Utils.js":"15","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\utility\\Definations.js":"16","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\ProtectedRoute.js":"17","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Logout.js":"18","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Notification.js":"19"},{"size":500,"mtime":499162500000,"results":"20","hashOfConfig":"21"},{"size":2971,"mtime":1616309700328,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"21"},{"size":10760,"mtime":1616308559478,"results":"24","hashOfConfig":"21"},{"size":149,"mtime":1615074072425,"results":"25","hashOfConfig":"21"},{"size":3939,"mtime":1615747195723,"results":"26","hashOfConfig":"21"},{"size":1326,"mtime":1613941200318,"results":"27","hashOfConfig":"21"},{"size":2641,"mtime":1616309841472,"results":"28","hashOfConfig":"21"},{"size":8425,"mtime":1616310071194,"results":"29","hashOfConfig":"21"},{"size":1319,"mtime":1616312852383,"results":"30","hashOfConfig":"21"},{"size":3934,"mtime":1615146312852,"results":"31","hashOfConfig":"21"},{"size":3418,"mtime":1615787730066,"results":"32","hashOfConfig":"21"},{"size":4361,"mtime":1616312462328,"results":"33","hashOfConfig":"21"},{"size":2117,"mtime":1615763023818,"results":"34","hashOfConfig":"21"},{"size":595,"mtime":1616309767717,"results":"35","hashOfConfig":"21"},{"size":302,"mtime":1615441762107,"results":"36","hashOfConfig":"21"},{"size":653,"mtime":1616033602887,"results":"37","hashOfConfig":"21"},{"size":310,"mtime":1615751972775,"results":"38","hashOfConfig":"21"},{"size":1051,"mtime":1616010651439,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1n3pwho",{"filePath":"43","messages":"44","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":1,"source":"50","usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"42"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"42"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"42"},"C:\\Users\\Mahi\\Repos\\todo-app\\src\\index.js",[],["90","91"],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\App.js",["92","93","94","95","96"],"import './ModernApp.css';\n\nimport React, {useEffect, useState} from 'react'\nimport {Route, BrowserRouter, Switch, Redirect, useHistory} from 'react-router-dom'\nimport {AuthContext} from './components/Context'\nimport Notification from './components/Notification'\nimport ProtectedRoute from './components/ProtectedRoute'\nimport Login from './components/Login'\nimport Logout from './components/Logout'\nimport Home from './components/Home'\nimport List from './components/List'\nimport Todo from './components/Todo'\nimport {requestAll} from './components/utility/APICalls'\nimport {tagLists} from './components/utility/Utils'\n\nconst App = _ => {\n  const [auth, setAuth] = useState({loggedIn: false})\n  const [global, setGlobal] = useState({})\n\n    //Always update todoLists using this function only.\n    //It ensures todoLists always are tagged.\n    const tagAndUpdateTodoLists = (cb, todoLists = null, makeDeepCopy = false) => {\n      setGlobal((prev) => {\n          var temp = todoLists\n          if (!temp)\n              temp = prev.todoLists\n\n          var todoLists_ = null\n          if (makeDeepCopy)\n              todoLists_ = JSON.parse(JSON.stringify(temp))\n          else\n              todoLists_ = temp\n\n          //tag lists\n          tagLists(todoLists_)\n\n          //If we have callback, process todoLists in it\n          cb(todoLists_)\n          \n          //Update it in global\n          return {\n              ...prev, todoLists: todoLists_\n          }\n      })\n  }\n\n  //Fetch and store todoList for the current user\n  useEffect(() => {\n    if (!global.todoLists) {\n        requestAll()\n        .then(response => {\n            if (response.status != 200) { \n                //Notify the user about the error\n                return\n            }\n            return response.json()\n        })\n        .then(todoLists => {\n            //take the todoLists received in response, sort it out and then save it in global state\n            tagAndUpdateTodoLists(todoLists => {}, todoLists)\n        })\n        .catch(err => {\n          console.error(err)\n        })\n    }\n}, [])\n\n  return (\n      <div className=\"App\">\n          <AuthContext.Provider value={[auth, setAuth]}>\n            <BrowserRouter>    \n              <Switch>\n                <Route exact path=\"/login\">\n                  <Login />\n                </Route>\n                <ProtectedRoute exact path='/'>\n                  <Home global={[global, setGlobal]} />\n                </ProtectedRoute>\n                <ProtectedRoute exact path='/list/:id'>\n                  <List global={[global, setGlobal]} />\n                </ProtectedRoute>\n                <ProtectedRoute exact path='/todo'>\n                  <Todo />\n                </ProtectedRoute>\n                <ProtectedRoute exact path='/logout'>\n                  <Logout />\n                </ProtectedRoute>\n              </Switch>\n            </BrowserRouter>\n          </AuthContext.Provider>\n      </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Mahi\\Repos\\todo-app\\src\\reportWebVitals.js",[],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\List.js",["97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113"],"import { faClock, faExpandAlt, faFile, faSort, faHandRock } from '@fortawesome/free-solid-svg-icons'\r\nimport React, { useState, useEffect, useRef } from 'react'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport Nav from './Nav'\r\nimport {QuickButtons, ButtonC} from './QuickButtons'\r\nimport {requestTodoCreate, requestTodoUpdate, requestUpdateSortingConfig} from './utility/APICalls'\r\nimport {reportType} from './utility/Definations'\r\nimport LiTodo from './UlTodo/LiTodo'\r\nimport {tagLists} from './utility/Utils'\r\nimport Notification from './Notification'\r\n\r\nconst todoSortType = {\r\n    AGE: 'created_at',\r\n    PRIORITY: 'priority'\r\n}\r\n\r\nconst List = ({global: [global, setGlobal]}) => {\r\n    const history = useHistory()\r\n    const {id} = useParams()\r\n    var mounted = useRef(true)\r\n\r\n    //TRUE ~ some async operation underway\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    //Grab the latest state for this list from global\r\n    //We are mantaining single source of truth, state refers to global.todoLists\r\n    //It is updated on every single render\r\n    var state = null\r\n    if (global && global.todoLists) {\r\n        state = global.todoLists.find(x => x._id == id)\r\n    }\r\n    \r\n    const buttons = [\r\n        new ButtonC(\"New\", faFile, _ => { history.push({pathname: '/todo', search: `?listId=${id}`}) }),\r\n        new ButtonC(\"Sort\", faSort, null, [\r\n            new ButtonC(\"Age\", faClock, _ => sort(todoSortType.AGE)),\r\n            new ButtonC(\"Priority\", faHandRock, _ => sort(todoSortType.PRIORITY))\r\n        ]),\r\n        new ButtonC(\"Expand all\", faExpandAlt, null)\r\n    ]\r\n\r\n    //Always update todoLists using this function only.\r\n    //It ensures todoLists always are tagged.\r\n    const tagAndUpdateTodoLists = (cb, todoList = null) => {\r\n        if (!mounted.current) return null\r\n        setGlobal((prev) => {\r\n            //If we have callback, process todoLists in it\r\n            var dc = todoList\r\n            if (dc == null) {\r\n                dc = JSON.parse(JSON.stringify(prev.todoLists))\r\n            }\r\n            //call the passed callback on the todoList\r\n            cb(dc)\r\n            //tag lists\r\n            tagLists(dc)\r\n            //Update it in global\r\n            return {\r\n                ...prev, todoLists: dc\r\n            }\r\n        })\r\n    }\r\n\r\n    //Handles subcomponent response received from remote endpoint\r\n    //for reportT, Refer to reportType\r\n    //remoteResponse, {status: number, json: Obj}\r\n    const subComponentReportHandler = (reportT, remoteResponse) => {\r\n        switch(reportT) {\r\n            case reportType.CREATE:\r\n                if (remoteResponse.status != 200) {\r\n                    //Error occured, do something here.\r\n                }\r\n                else {\r\n                    const createTodoCallback = (todoLists) => {\r\n                        var todoList = todoLists.find(x => x._id == id)\r\n                        todoList.todo_items.push(remoteResponse.json)\r\n                    }\r\n                    tagAndUpdateTodoLists(createTodoCallback)\r\n                }\r\n                break\r\n            case reportType.UPDATE:\r\n                if (remoteResponse.status != 200) {\r\n                    //Error occured, do something here.\r\n                }\r\n                else {\r\n                    const updateTodoCallback = (todoLists) => {\r\n                        var todoListIndex = todoLists.findIndex(x => x._id == id)\r\n                        var todoItemIndex = todoLists[todoListIndex].todo_items.findIndex(x => x._id == remoteResponse.json._id)\r\n                        todoLists[todoListIndex].todo_items[todoItemIndex] = {... todoLists[todoListIndex].todo_items[todoItemIndex], ...remoteResponse.json}\r\n                    }\r\n                    tagAndUpdateTodoLists(updateTodoCallback)\r\n                }\r\n                break\r\n            case reportType.DELETE:\r\n                if (remoteResponse.status != 200) {\r\n                    //Error occured, do something here.\r\n                }\r\n                else {\r\n                    const deleteTodoCallback = (todoLists) => {\r\n                        var todoListIndex = todoLists.findIndex(x => x._id == id)\r\n                        var todoItemIndex = todoLists[todoListIndex].todo_items.findIndex(x => x._id == remoteResponse.json._id)\r\n                        console.log(todoListIndex)\r\n                        todoLists[todoListIndex].todo_items.splice(todoItemIndex, 1)\r\n                    }\r\n                    tagAndUpdateTodoLists(deleteTodoCallback)\r\n                }\r\n                break\r\n        }\r\n    }\r\n\r\n    //Request server to create/update todo\r\n    const processTodo = todo => {\r\n        //If the todo has '_id' property, it indicates that it already exists and its an update call, else create new one.\r\n        if (todo._id) {\r\n            requestTodoUpdate(id, todo)\r\n            .then(response => {\r\n                if (response.status != 200) {\r\n                    //throw notification to user\r\n                    subComponentReportHandler(reportType.UPDATE, {status: response.status})\r\n                    throw new Error(`Error occured while updating todo.`)\r\n                }\r\n                return response.json()\r\n            })\r\n            .then(updatedTodo => {\r\n                subComponentReportHandler(reportType.UPDATE, {status: 200, json: updatedTodo})\r\n            })\r\n        }\r\n        else {\r\n            //create\r\n            requestTodoCreate(id, todo)\r\n            .then(response => {\r\n                if (response.status != 200) {\r\n                    subComponentReportHandler(reportType.CREATE, {status: response.status})\r\n                    throw new Error(`Error occured while creating todo.`)\r\n                }\r\n                return response.json()\r\n            })\r\n            .then(newTodo => {\r\n                subComponentReportHandler(reportType.CREATE, {status: 200, json: newTodo})\r\n            })\r\n        }\r\n    }\r\n\r\n    //If criteria is passed as a parameter, it compares with the previous criteria, and appends the sorting order('asc' or 'desc')\r\n    //keyword accordingly.\r\n    //Else, returns the current criteria.\r\n    const generateCriteria = (criteria = null) => {\r\n        if (criteria == null) return state.sort\r\n        const prevCriteria = state.sort.split('.')\r\n\r\n        if (criteria === prevCriteria[0]) {\r\n            //Opposite sorting order\r\n            if (prevCriteria[1] === 'desc') {\r\n                criteria += '.asc'\r\n            }\r\n            else {\r\n                criteria += '.desc'\r\n            }\r\n        } else {\r\n            //Otherwise default desc order\r\n            criteria += '.desc'\r\n        }\r\n\r\n        return criteria\r\n    }\r\n\r\n    const sortTodosCallback = (todoLists, criteria) => {\r\n        var i = todoLists.findIndex(x => x._id == state._id)\r\n        //Sort the todo_items inplace according to the todoList.sort\r\n        //Right now we are only sorting if the criteria is 'priorirty'\r\n        const criteria_ = criteria.split('.')\r\n        if (criteria_[0] === todoSortType.PRIORITY) {\r\n            if (criteria_[1] === 'asc') {\r\n                todoLists[i].todo_items.sort(priorityCompare)\r\n            }\r\n            else {\r\n                todoLists[i].todo_items.sort((a, b) => (-1 * priorityCompare(a, b)))\r\n            }\r\n        }\r\n        else if (criteria_[0] === todoSortType.AGE) {\r\n            if (criteria_[1] === 'asc') {\r\n                todoLists[i].todo_items.sort(createdAtCompare)\r\n            }\r\n            else {\r\n                todoLists[i].todo_items.sort((a, b) => (-1 * createdAtCompare(a, b)))\r\n            }\r\n        }\r\n        todoLists[i] = {\r\n            ...todoLists[i], sort: criteria\r\n        }\r\n    }\r\n\r\n    const sort = (criteria) => {\r\n        criteria = generateCriteria(criteria)\r\n        requestUpdateSortingConfig(state._id, criteria)\r\n        .then(response => {\r\n            if (response.status != 200) {\r\n                //throw err\r\n            }\r\n            else {\r\n                \r\n                tagAndUpdateTodoLists((todoLists) => sortTodosCallback(todoLists, criteria))\r\n            }\r\n        })\r\n    }\r\n\r\n    //It is callback function to compare todos based on priority\r\n    //Orders them in descending order\r\n    //multiply the result by -1, for ascending order\r\n    const priorityCompare = (a, b) => {\r\n        if (a.priority === b.priority) return 0\r\n        if (a.priority === 'high') return -1\r\n        if (a.priority === 'moderate' && b.priority !== 'high') return -1\r\n        return 1\r\n    }\r\n\r\n    const createdAtCompare = (a, b) => {\r\n        if (a.created_at === b.created_at) return 0\r\n        if (a.created_at > b.created_at) return -1\r\n        return 1\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!global.todoLists) {\r\n            return history.push({\r\n                pathname: '/'\r\n            })\r\n        }\r\n        //In case we do not have list id passed in as url params, redirect user back to the Home page\r\n        if (!id) {\r\n            history.push({\r\n                pathname: '/'\r\n            })\r\n        } else {\r\n            //Just checks whether we have any todoList referring to the id provided\r\n            var ind = global.todoLists.findIndex(x => x._id === id)\r\n            if (ind === -1)\r\n                history.push({\r\n                    pathname: '/'\r\n                })\r\n\r\n            //If the user is redirected to this page from the /todo, then check for the state received to add or update todo\r\n            if (history.location.state && history.location.state.todo) {\r\n                processTodo(history.location.state.todo)\r\n                //clear history.location.state\r\n                history.replace(`/list/${id}`)\r\n            }\r\n        }\r\n\r\n        tagAndUpdateTodoLists((todoLists) => sortTodosCallback(todoLists, state.sort))\r\n        return () => {\r\n            mounted.current = false\r\n        }\r\n    }, [])\r\n    \r\n    return (\r\n        <div className=\"home\">\r\n            {loading && <Notification message={'Saving changes please wait...'} />}\r\n            <Nav />\r\n            <div className=\"content\">\r\n                <div className=\"title\">\r\n                    {state && state.title}\r\n                </div>\r\n                <>\r\n                    <QuickButtons buttons={buttons} />\r\n                    <br />\r\n                    {!state ? <p>Please wait while we load your data...</p> : \r\n                    <div className=\"ul-list\">\r\n                        {state.todo_items.map((x) => <LiTodo key={x._id} todoListId={state._id} todo={x} reportParent={subComponentReportHandler} />)}\r\n                    </div>\r\n                    }   \r\n                </>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Context.js",["114"],"import React, {useState} from 'react'\r\n\r\nexport const DataContext = React.createContext(null)\r\nexport const AuthContext = React.createContext(null)\r\n","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\utility\\APICalls.js",[],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\QuickButtons.js",["115"],"import React from 'react'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\n\r\nexport class ButtonC {\r\n    constructor(title, faIcon, onClick, dropdowns = []) {\r\n        this.title = title\r\n        this.faIcon = faIcon\r\n        this.dropdowns = dropdowns\r\n        this.onClick = onClick\r\n    }\r\n}\r\n\r\nexport const Button = ({ button }) => {\r\n    return (\r\n        <button onClick={button.onClick}>\r\n            {button.faIcon != null && <FontAwesomeIcon icon={button.faIcon} />} {button.title}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport const QuickButtons = ({buttons}) => {\r\n    return (\r\n        <div className=\"quick-buttons\">\r\n            {buttons.map((x) => {\r\n                if (x.dropdowns.length == 0) {\r\n                    return <Button button={x} />\r\n                }\r\n                else {\r\n                    return (\r\n                        <div className=\"dropdown\">\r\n                            <Button button={x} />\r\n                            <div className=\"dropdown-content\">\r\n                                {x.dropdowns.map((y) => {\r\n                                    return <Button button={y} />\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            })}\r\n        </div>\r\n    )\r\n}","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Login.js",["116","117"],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Home.js",["118","119","120","121","122","123","124","125","126","127","128"],"import React, {useEffect, useState, useContext, useRef} from 'react'\r\nimport {faFile, faSort} from '@fortawesome/free-solid-svg-icons'\r\nimport {requestAll} from './utility/APICalls'\r\nimport Nav from './Nav'\r\nimport {QuickButtons, ButtonC} from './QuickButtons'\r\nimport LiList from './UlList/LiList'\r\nimport CreateListForm from './CreateListForm'\r\nimport {tagLists} from './utility/Utils'\r\nimport {reportType} from './utility/Definations'\r\nimport {requestUpdateListSortingConfig} from './utility/APICalls'\r\nimport {AuthContext} from './Context'\r\nimport Notification from './Notification'\r\n\r\nconst Home = ({global: [global, setGlobal]}) => {\r\n    const [state, setState] = useState({createListFormEnabled: false})\r\n    const mounted = useRef(true)\r\n    const sortType = {\r\n        ALPHABETICAL: 'title',\r\n        PENDING_ITEMS: 'pendingCount',\r\n        HIGH_PRIORITY_ITEMS: 'highPriorityCount',\r\n        CREATED_AT: 'created_at'\r\n    }\r\n    const sortingOrder = {\r\n        ASC: 'asc',\r\n        DESC: 'desc'\r\n    }\r\n    const [authContext, setAuthContext] = useContext(AuthContext)\r\n    \r\n    //Event handler for \"New\" list button\r\n    const toggleForm = _ => {\r\n        setState((prev) => {\r\n            return {\r\n                ...prev, createListFormEnabled: !prev.createListFormEnabled\r\n            }\r\n        })\r\n    }\r\n\r\n    //Always update todoLists using this function only.\r\n    //It ensures todoLists always are tagged.\r\n    const tagAndUpdateTodoLists = (cb, todoLists = null, makeDeepCopy = false) => {\r\n        if (!mounted.current) return null\r\n        setGlobal((prev) => {\r\n            var temp = todoLists\r\n            if (!temp)\r\n                temp = prev.todoLists\r\n\r\n            var todoLists_ = null\r\n            if (makeDeepCopy)\r\n                todoLists_ = JSON.parse(JSON.stringify(temp))\r\n            else\r\n                todoLists_ = temp\r\n\r\n            //tag lists\r\n            tagLists(todoLists_)\r\n\r\n            //If we have callback, process todoLists in it\r\n            cb(todoLists_)\r\n            \r\n            //Update it in global\r\n            return {\r\n                ...prev, todoLists: todoLists_\r\n            }\r\n        })\r\n    }\r\n\r\n    //Handles subcomponent response received from remote endpoint\r\n    //for reportT, Refer to reportType\r\n    //remoteResponse, {status: number, json: Obj}\r\n    const subComponentReportHandler = (reportT, remoteResponse) => {\r\n        switch(reportT) {\r\n            case reportType.CREATE:\r\n                if (remoteResponse.status != 200) {\r\n                    //Error occured, do something here.\r\n                }\r\n                else {\r\n                    tagAndUpdateTodoLists(todoLists => {\r\n                        todoLists.push(remoteResponse.json)\r\n                        listSortingCallback(todoLists, authContext.sort)\r\n                    })\r\n                }\r\n                toggleForm()\r\n                break\r\n            case reportType.UPDATE:\r\n                if (remoteResponse.status != 200) {\r\n                    //Error occured, do something here.\r\n                }\r\n                else {\r\n                    //remoteResponse.json is the updated list\r\n                    //Replace the todoList with the updated one in global\r\n                    tagAndUpdateTodoLists(todoLists => {\r\n                        var index = todoLists.findIndex(x => x._id == remoteResponse.json._id)\r\n                        if (index != -1)\r\n                            todoLists[index] = remoteResponse.json\r\n                        listSortingCallback(todoLists, authContext.sort)\r\n                    })\r\n                }\r\n                break\r\n            case reportType.DELETE:\r\n                if (remoteResponse.status != 200) {\r\n                    //Error occured, do something here.\r\n                }\r\n                else {\r\n                    //remoteResponse.json._id indicates id of the list to be deleted\r\n                    tagAndUpdateTodoLists(todoLists => {\r\n                        const index = todoLists.findIndex(x => x._id === remoteResponse.json.id)\r\n                        if (index != -1)\r\n                            todoLists.splice(index, 1)\r\n                    })\r\n                }\r\n                break\r\n        }\r\n    }\r\n\r\n    //Just a wrapper function to compare todoLists based on the specified properpty\r\n    const sortByProperty = (a, b, property) => {\r\n        if (a[property] === b[property]) return 0\r\n        if (a[property] > b[property]) return -1\r\n        return 1\r\n    }\r\n\r\n    //Sorts the todoLists based on the sorting preference 'criteria'\r\n    const listSortingCallback = (todoLists, criteria) => {\r\n        const criteria_ = criteria.split('.')\r\n        if (criteria_[1] === sortingOrder.DESC) {\r\n            todoLists.sort((a, b) => sortByProperty(a, b, criteria_[0]))\r\n        }\r\n        else {\r\n            todoLists.sort((a, b) => (-1 * sortByProperty(a, b, criteria_[0])))\r\n        }\r\n    } \r\n\r\n    //Sort the list, refer to sortType enum for available sorting options\r\n    const sort = criteria => {\r\n        const prevCriteria = authContext.sort.split('.')\r\n        if (criteria === prevCriteria[0]) {\r\n            //Opposite sorting order\r\n            if (prevCriteria[1] === sortingOrder.DESC) {\r\n                criteria += `.${sortingOrder.ASC}`\r\n            }\r\n            else {\r\n                criteria += `.${sortingOrder.DESC}`\r\n            }\r\n        } else {\r\n            //Otherwise default desc order\r\n            criteria += `.${sortingOrder.DESC}`\r\n        }\r\n\r\n        requestUpdateListSortingConfig(criteria)\r\n        .then(response => {\r\n            if (response.status != 200) {\r\n                //throw error over here\r\n            }\r\n            else {\r\n                setAuthContext(prev => {\r\n                    return {\r\n                        ...prev, sort: criteria\r\n                    }\r\n                })\r\n\r\n                tagAndUpdateTodoLists(todoLists => listSortingCallback(todoLists, criteria))\r\n            }\r\n        })\r\n    }\r\n\r\n    //Buttons, we will pass to \"QuickButtons\" component\r\n    const buttons = [\r\n                        new ButtonC(\"New\", faFile, toggleForm),\r\n                        new ButtonC(\"Sort\", faSort, null, [\r\n                            new ButtonC(\"Alphabetical\", null, () => sort(sortType.ALPHABETICAL)),\r\n                            new ButtonC(\"Pending items\", null, () => sort(sortType.PENDING_ITEMS)),\r\n                            new ButtonC(\"High-priority items\", null, () => sort(sortType.HIGH_PRIORITY_ITEMS)),\r\n                            new ButtonC(\"Date created\", null, () => sort(sortType.CREATED_AT))\r\n                        ])\r\n                    ]\r\n\r\n    //Fetch and store todoList for the current user\r\n    useEffect(() => {\r\n        if (!global.todoLists) {\r\n            requestAll()\r\n            .then(response => {\r\n                if (response.status != 200) { \r\n                    //Notify the user about the error\r\n                    return\r\n                }\r\n                return response.json()\r\n            })\r\n            .then(todoLists => {\r\n                //take the todoLists received in response, sort it out and then save it in global state\r\n                tagAndUpdateTodoLists(todoLists => listSortingCallback(todoLists, authContext.sort), todoLists)\r\n            }) \r\n        }\r\n        else {\r\n            var todoLists = global.todoLists\r\n            tagAndUpdateTodoLists(todoLists => listSortingCallback(todoLists, authContext.sort), todoLists)\r\n        }\r\n\r\n        return () => mounted.current = false\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            {/* <Notification message={'small msg!'} /> */}\r\n            <Nav />\r\n            <div className=\"content\">\r\n                <div className=\"title\">\r\n                    My Lists\r\n                </div>\r\n                <QuickButtons buttons={buttons}/>\r\n                <br />\r\n                {state.createListFormEnabled && <CreateListForm reportParent={subComponentReportHandler}/>}\r\n                <div className=\"ul-list\">\r\n                    {!global.todoLists ? \r\n                    <>Please wait while we are loading your data</> : \r\n                    global.todoLists.map((list) => <LiList key={list._id} list={list} reportParent={subComponentReportHandler} />)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Nav.js",[],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\UlList\\LiList.js",["129","130"],"import React, {useState} from 'react'\r\nimport {useHistory} from 'react-router-dom'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faExclamation, faExclamationTriangle, faTrashAlt, faEdit, faSave} from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport {requestDelete, requestUpdate} from '../utility/APICalls'\r\nimport {reportType} from '../utility/Definations'\r\n\r\nconst LiList = ({list, reportParent}) => {\r\n    const history = useHistory()\r\n    const [state, setState] = useState({rename: false, newTitle: \"\"})\r\n\r\n    const clicked = _ => {\r\n        history.push({\r\n            state: list,\r\n            pathname: `/list/${list._id}`\r\n        })\r\n    }\r\n\r\n    const deleteSelf = event => {\r\n        event.stopPropagation()\r\n        requestDelete(list._id)\r\n        .then(response => {\r\n            if (response.status != 200) {\r\n                reportParent(reportType.DELETE, {status: response.status})\r\n            }\r\n            else {\r\n                reportParent(reportType.DELETE, {status: response.status, json: {id: list._id}})\r\n            }\r\n        })\r\n    }\r\n\r\n    const toggleRename = event => {\r\n        //Check for event, because it is also called from renameSelf, which does not generates event\r\n        if (event) event.stopPropagation()\r\n        //state.newTitle has to be in sync with the current list.title\r\n        setState((prev) => {\r\n            return {\r\n                ...prev, rename: !prev.rename, newTitle: list.title\r\n            }\r\n        })\r\n    }\r\n\r\n    //triggered by onChange handler of title <input>\r\n    const titleChanged = event => {\r\n        setState((prev) => {\r\n            return {\r\n                ...prev, newTitle: event.target.value\r\n            }\r\n        })\r\n    }\r\n\r\n    const renameSelf = event => {\r\n        event.stopPropagation()\r\n        requestUpdate(list._id, state.newTitle)\r\n        .then(response => {\r\n            if (response.status != 200) {\r\n                reportParent(reportType.UPDATE, {status: response.status})\r\n                throw new Error(`${response.text}`)\r\n            }\r\n            return response.json()\r\n        })\r\n        .then(todoList => {\r\n            reportParent(reportType.UPDATE, {status: 200, json: todoList})\r\n        })\r\n        .catch(err => console.error(err))\r\n        toggleRename()\r\n    }\r\n\r\n    return (\r\n        <div className=\"li-list\" onClick={clicked}>\r\n            {state.rename ?\r\n            <span onClick={event => event.stopPropagation()}>\r\n                <input type=\"text\" className=\"li-title-rename\" onChange={titleChanged} value={state.newTitle} />\r\n                <FontAwesomeIcon onClick={renameSelf} className=\"fa-rename\" icon={faSave} />    \r\n            </span> :\r\n            <span onClick={event => event.stopPropagation()}>\r\n                {list.title}     \r\n                <FontAwesomeIcon onClick={toggleRename} className=\"fa-rename\" icon={faEdit} />\r\n            </span>}\r\n            <span className=\"li-list-right\">\r\n                <span className=\"indicator-group\">\r\n                    <span className=\"indicator\">\r\n                        <FontAwesomeIcon className=\"danger-text indicator-fa\" icon={faExclamation} />\r\n                        <span className=\"indicator-count\">{list.highPriorityCount}</span>\r\n                    </span>\r\n                    <span className=\"indicator\">\r\n                        <FontAwesomeIcon className=\"warning-text indicator-fa\" icon={faExclamationTriangle} />\r\n                        <span className=\"indicator-count\">{list.pendingCount}</span>\r\n                    </span>\r\n                </span>\r\n                <span className=\"indicator-group\">\r\n                    <span className=\"indicator\">\r\n                        <FontAwesomeIcon onClick={deleteSelf} className=\"indicator-fa\" icon={faTrashAlt} />\r\n                    </span>\r\n                </span>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LiList","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\UlTodo\\LiTodo.js",["131","132"],"import React, {useState} from 'react'\r\nimport {useHistory} from 'react-router-dom'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faClock, faEdit, faTrash} from '@fortawesome/free-solid-svg-icons'\r\nimport { requestTodoUpdate, requestTodoDelete } from '../utility/APICalls'\r\nimport {reportType} from '../utility/Definations'\r\n\r\nconst LiTodo = ({todoListId, todo, reportParent}) => {\r\n    const [state, setState] = useState({detailedView: false})\r\n    const history = useHistory()\r\n    const msInHours = 3600000\r\n    const liTodoClass = `li-todo ${todo.priority}-priority`\r\n\r\n    var age = (new Date() - new Date(todo.created_at)) / msInHours\r\n    if (age > 24 ) { \r\n        age /= 24\r\n        age = age.toFixed(2)\r\n        age = age.toString() + \" days\"\r\n    }\r\n    else {\r\n        age = age.toFixed(2)\r\n        age = age.toString() + \" hours\"\r\n    }\r\n\r\n    const toggleDetails = () => {\r\n        setState((prev) => { return {...prev, detailedView: !prev.detailedView} })\r\n    }\r\n\r\n    const done = (event) => {\r\n        event.stopPropagation()\r\n        requestTodoUpdate(todoListId, {...todo, compeleted: !todo.compeleted})\r\n        .then(response => {\r\n            if (response.status != 200) {\r\n                reportParent(reportType.UPDATE, {status: response.status})\r\n                throw new Error('Error occured while updating Todo!')\r\n            }\r\n            return response.json()\r\n        })\r\n        .then(updatedTodo => {\r\n            reportParent(reportType.UPDATE, {status: 200, json: updatedTodo})\r\n        })\r\n    }\r\n\r\n    const deleteSelf = event => {\r\n        event.stopPropagation()\r\n        requestTodoDelete(todoListId, todo._id)\r\n        .then(response => {\r\n            if (response.status != 200) {\r\n                reportParent(reportType.DELETE, {status: response.status})\r\n                throw new Error('Error occured while deleteing Todo!')\r\n            }\r\n            else {\r\n                reportParent(reportType.DELETE, {status: 200, json: {_id: todo._id}})\r\n            }\r\n        })\r\n    }\r\n\r\n    const editSelf = event => {\r\n        event.stopPropagation()\r\n        history.push(`/todo?listId=${todoListId}`, {todo})\r\n    }\r\n\r\n    return (\r\n        <div className={liTodoClass} onDoubleClick={toggleDetails}>\r\n            <div className=\"li-todo-basic\">\r\n                <input type=\"checkbox\" checked={todo.compeleted} onClick={done} readOnly/>\r\n                <span style={todo.compeleted ? {textDecoration: 'line-through'} : {}}>\r\n                    { todo.title }\r\n                </span>\r\n                <span className=\"li-todo-right\">\r\n                    <div className=\"indicator\">\r\n                        <FontAwesomeIcon className=\"fa-outline\" icon={faClock} />\r\n                        <span className=\"indicator-count\">{age}</span>\r\n                    </div>\r\n                    <span className=\"indicator\">\r\n                        <FontAwesomeIcon icon={faEdit} onClick={editSelf} />\r\n                    </span>\r\n                    <span className=\"indicator\">\r\n                        <FontAwesomeIcon icon={faTrash} onClick={deleteSelf} />\r\n                    </span>\r\n                </span>\r\n            </div>\r\n            {state.detailedView && \r\n                <div className=\"li-todo-detailed\">\r\n                    {todo.desc}\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LiTodo","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Todo.js",["133","134"],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\CreateListForm.js",["135"],"import React, {useState} from 'react'\r\nimport {faSave} from '@fortawesome/free-solid-svg-icons'\r\nimport {requestCreate} from './utility/APICalls'\r\nimport {reportType} from './utility/Definations'\r\nimport {ButtonC, Button} from './QuickButtons'\r\nimport {isAlphaNumeric} from './utility/Utils'\r\n\r\n//reportParent => check out the func defination\r\nconst CreateListForm = ({reportParent}) => {\r\n    const [state, setState] = useState({title: \"\"})\r\n    \r\n    const createList = () => {\r\n        if (!isAlphaNumeric(state.title)) {\r\n            //Notify the user!\r\n            return\r\n        }\r\n        requestCreate(state.title)\r\n        .then(response => {\r\n            if (response.status != 200) {\r\n                //Notify the user of error\r\n                reportParent(reportType.CREATE, {status: response.status}) \r\n                throw new Error(`${response.text}`)\r\n            }\r\n            return response.json()\r\n        })\r\n        .then((todoList) => {\r\n            //Pass this todoList back to the Home component\r\n            //Global will be updated there\r\n            //Reasoning behind this is, CreateListForm is kind of a 'sub-component', it must report to its Parent component in case of any global update\r\n            console.log(todoList)\r\n            reportParent(reportType.CREATE, {status: 200, json: todoList}) \r\n        })\r\n        .catch(err => {\r\n            console.error(err)\r\n        })\r\n    }\r\n\r\n    //On title input change update the state, since the input field is a Controlled Component\r\n    const titleChanged = event => {\r\n        setState((prev) => ({ ...prev, title: event.target.value }))\r\n    }\r\n\r\n    const buttonData = new ButtonC(\"Save\", faSave, createList)\r\n\r\n    return (\r\n        <div className=\"create-list\">\r\n            <div className=\"form-title\">Create a new list</div>\r\n            <div className=\"input-group inline\">\r\n                <label>Title</label>\r\n                <input type=\"text\" value={state.title} onChange={titleChanged} />\r\n                <Button button={buttonData} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateListForm","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\utility\\Utils.js",[],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\utility\\Definations.js",[],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\ProtectedRoute.js",["136"],"import {useContext} from 'react'\r\nimport {Redirect, Route} from 'react-router-dom'\r\nimport { AuthContext } from './Context'\r\nimport {useHistory} from 'react-router-dom'\r\n\r\nconst ProtectedRoute = ({path, children, ...restProps}) => {\r\n    const [auth, setAuth] = useContext(AuthContext)\r\n    const history = useHistory()\r\n    const pathname = history.location.pathname\r\n\r\n    return (<>\r\n        {auth.loggedIn ? \r\n        <Route path={pathname} {...restProps}>\r\n            {children}\r\n        </Route>\r\n        :\r\n        <Redirect to={{pathname: '/login', state: {from: pathname}}} />\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProtectedRoute","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Logout.js",["137","138","139"],"import React from 'react'\r\nimport { GoogleLogout } from 'react-google-login';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Logout = () => {\r\n    const history = useHistory()\r\n    const logout = () => {\r\n        history.push('/')\r\n    }\r\n\r\n    return (\r\n        \"\"\r\n    )\r\n}\r\n\r\nexport default Logout","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Notification.js",["140","141"],"import React, {useEffect, useState} from 'react'\r\n\r\nconst Notification = (prop) => {\r\n    const [message, setMessage] = useState(null)\r\n\r\n    const objectToString = (obj, preText = '') => {\r\n        var msg = ''\r\n        msg += `\\t${preText}{${preText}\\n`\r\n        for (const key in obj) {\r\n            var val = obj[key]\r\n            if (typeof val === 'object') {\r\n                val = '\\n' + objectToString(val, preText + '\\t')\r\n            }\r\n            msg += `\\t${preText}${key}: ${val}\\n`\r\n        }\r\n        msg += `\\t${preText}}`\r\n        return msg\r\n    }\r\n\r\n    useEffect(() => {\r\n        var msg = prop.message\r\n        if (typeof prop.message === 'object') {\r\n            msg = objectToString(prop.message)\r\n        }\r\n        setMessage(() => msg)\r\n        console.log(msg)\r\n    }, [prop.message])\r\n\r\n    if (message == null) return null\r\n\r\n    return (\r\n        <div className='notification'>\r\n            {message}\r\n            <img src='/loader.gif' height='32' width='32' />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification",{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":4,"column":39,"nodeType":"148","messageId":"149","endLine":4,"endColumn":47},{"ruleId":"146","severity":1,"message":"150","line":4,"column":49,"nodeType":"148","messageId":"149","endLine":4,"endColumn":59},{"ruleId":"146","severity":1,"message":"151","line":6,"column":8,"nodeType":"148","messageId":"149","endLine":6,"endColumn":20},{"ruleId":"152","severity":1,"message":"153","line":52,"column":33,"nodeType":"154","messageId":"155","endLine":52,"endColumn":35},{"ruleId":"156","severity":1,"message":"157","line":66,"column":4,"nodeType":"158","endLine":66,"endColumn":6,"suggestions":"159"},{"ruleId":"146","severity":1,"message":"160","line":23,"column":21,"nodeType":"148","messageId":"149","endLine":23,"endColumn":31},{"ruleId":"152","severity":1,"message":"161","line":30,"column":50,"nodeType":"154","messageId":"155","endLine":30,"endColumn":52},{"ruleId":"162","severity":1,"message":"163","line":67,"column":9,"nodeType":"164","messageId":"165","endLine":107,"endColumn":10},{"ruleId":"152","severity":1,"message":"153","line":69,"column":43,"nodeType":"154","messageId":"155","endLine":69,"endColumn":45},{"ruleId":"152","severity":1,"message":"161","line":74,"column":66,"nodeType":"154","messageId":"155","endLine":74,"endColumn":68},{"ruleId":"152","severity":1,"message":"153","line":81,"column":43,"nodeType":"154","messageId":"155","endLine":81,"endColumn":45},{"ruleId":"152","severity":1,"message":"161","line":86,"column":76,"nodeType":"154","messageId":"155","endLine":86,"endColumn":78},{"ruleId":"152","severity":1,"message":"161","line":87,"column":102,"nodeType":"154","messageId":"155","endLine":87,"endColumn":104},{"ruleId":"166","severity":1,"message":"167","line":88,"column":82,"nodeType":"168","messageId":"169","endLine":88,"endColumn":83,"fix":"170"},{"ruleId":"152","severity":1,"message":"153","line":94,"column":43,"nodeType":"154","messageId":"155","endLine":94,"endColumn":45},{"ruleId":"152","severity":1,"message":"161","line":99,"column":76,"nodeType":"154","messageId":"155","endLine":99,"endColumn":78},{"ruleId":"152","severity":1,"message":"161","line":100,"column":102,"nodeType":"154","messageId":"155","endLine":100,"endColumn":104},{"ruleId":"152","severity":1,"message":"153","line":116,"column":37,"nodeType":"154","messageId":"155","endLine":116,"endColumn":39},{"ruleId":"152","severity":1,"message":"153","line":131,"column":37,"nodeType":"154","messageId":"155","endLine":131,"endColumn":39},{"ruleId":"152","severity":1,"message":"161","line":167,"column":48,"nodeType":"154","messageId":"155","endLine":167,"endColumn":50},{"ruleId":"152","severity":1,"message":"153","line":196,"column":33,"nodeType":"154","messageId":"155","endLine":196,"endColumn":35},{"ruleId":"156","severity":1,"message":"171","line":253,"column":8,"nodeType":"158","endLine":253,"endColumn":10,"suggestions":"172"},{"ruleId":"146","severity":1,"message":"173","line":1,"column":16,"nodeType":"148","messageId":"149","endLine":1,"endColumn":24},{"ruleId":"152","severity":1,"message":"161","line":25,"column":40,"nodeType":"154","messageId":"155","endLine":25,"endColumn":42},{"ruleId":"146","severity":1,"message":"174","line":9,"column":12,"nodeType":"148","messageId":"149","endLine":9,"endColumn":16},{"ruleId":"152","severity":1,"message":"161","line":26,"column":24,"nodeType":"154","messageId":"155","endLine":26,"endColumn":26},{"ruleId":"146","severity":1,"message":"151","line":12,"column":8,"nodeType":"148","messageId":"149","endLine":12,"endColumn":20},{"ruleId":"162","severity":1,"message":"163","line":70,"column":9,"nodeType":"164","messageId":"165","endLine":111,"endColumn":10},{"ruleId":"152","severity":1,"message":"153","line":72,"column":43,"nodeType":"154","messageId":"155","endLine":72,"endColumn":45},{"ruleId":"152","severity":1,"message":"153","line":84,"column":43,"nodeType":"154","messageId":"155","endLine":84,"endColumn":45},{"ruleId":"152","severity":1,"message":"161","line":91,"column":68,"nodeType":"154","messageId":"155","endLine":91,"endColumn":70},{"ruleId":"152","severity":1,"message":"153","line":92,"column":35,"nodeType":"154","messageId":"155","endLine":92,"endColumn":37},{"ruleId":"152","severity":1,"message":"153","line":99,"column":43,"nodeType":"154","messageId":"155","endLine":99,"endColumn":45},{"ruleId":"152","severity":1,"message":"153","line":106,"column":35,"nodeType":"154","messageId":"155","endLine":106,"endColumn":37},{"ruleId":"152","severity":1,"message":"153","line":150,"column":33,"nodeType":"154","messageId":"155","endLine":150,"endColumn":35},{"ruleId":"152","severity":1,"message":"153","line":181,"column":37,"nodeType":"154","messageId":"155","endLine":181,"endColumn":39},{"ruleId":"156","severity":1,"message":"175","line":198,"column":8,"nodeType":"158","endLine":198,"endColumn":10,"suggestions":"176"},{"ruleId":"152","severity":1,"message":"153","line":24,"column":33,"nodeType":"154","messageId":"155","endLine":24,"endColumn":35},{"ruleId":"152","severity":1,"message":"153","line":57,"column":33,"nodeType":"154","messageId":"155","endLine":57,"endColumn":35},{"ruleId":"152","severity":1,"message":"153","line":33,"column":33,"nodeType":"154","messageId":"155","endLine":33,"endColumn":35},{"ruleId":"152","severity":1,"message":"153","line":48,"column":33,"nodeType":"154","messageId":"155","endLine":48,"endColumn":35},{"ruleId":"146","severity":1,"message":"177","line":5,"column":25,"nodeType":"148","messageId":"149","endLine":5,"endColumn":33},{"ruleId":"156","severity":1,"message":"178","line":49,"column":8,"nodeType":"158","endLine":49,"endColumn":10,"suggestions":"179"},{"ruleId":"152","severity":1,"message":"153","line":19,"column":33,"nodeType":"154","messageId":"155","endLine":19,"endColumn":35},{"ruleId":"146","severity":1,"message":"180","line":7,"column":18,"nodeType":"148","messageId":"149","endLine":7,"endColumn":25},{"ruleId":"146","severity":1,"message":"181","line":1,"column":8,"nodeType":"148","messageId":"149","endLine":1,"endColumn":13},{"ruleId":"146","severity":1,"message":"182","line":2,"column":10,"nodeType":"148","messageId":"149","endLine":2,"endColumn":22},{"ruleId":"146","severity":1,"message":"183","line":7,"column":11,"nodeType":"148","messageId":"149","endLine":7,"endColumn":17},{"ruleId":"156","severity":1,"message":"184","line":27,"column":8,"nodeType":"158","endLine":27,"endColumn":22,"suggestions":"185"},{"ruleId":"186","severity":1,"message":"187","line":34,"column":13,"nodeType":"188","endLine":34,"endColumn":61},"no-native-reassign",["189"],"no-negated-in-lhs",["190"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'useHistory' is defined but never used.","'Notification' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'global.todoLists'. Either include it or remove the dependency array.","ArrayExpression",["191"],"'setLoading' is assigned a value but never used.","Expected '===' and instead saw '=='.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","rest-spread-spacing","Unexpected whitespace after spread property operator.","ExperimentalSpreadProperty","unexpectedWhitespace",{"range":"192","text":"193"},"React Hook useEffect has missing dependencies: 'global.todoLists', 'history', 'id', 'processTodo', 'sortTodosCallback', 'state.sort', and 'tagAndUpdateTodoLists'. Either include them or remove the dependency array.",["194"],"'useState' is defined but never used.","'auth' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'authContext.sort', 'global.todoLists', 'listSortingCallback', and 'tagAndUpdateTodoLists'. Either include them or remove the dependency array.",["195"],"'isString' is defined but never used.","React Hook useEffect has missing dependencies: 'history.location.search' and 'history.location.state'. Either include them or remove the dependency array.",["196"],"'setAuth' is assigned a value but never used.","'React' is defined but never used.","'GoogleLogout' is defined but never used.","'logout' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'objectToString'. Either include it or remove the dependency array.",["197"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"198","fix":"199"},[3649,3650],"",{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},"Update the dependencies array to be: [global.todoLists]",{"range":"208","text":"209"},"Update the dependencies array to be: [global.todoLists, history, id, processTodo, sortTodosCallback, state.sort, tagAndUpdateTodoLists]",{"range":"210","text":"211"},"Update the dependencies array to be: [authContext.sort, global.todoLists, listSortingCallback, tagAndUpdateTodoLists]",{"range":"212","text":"213"},"Update the dependencies array to be: [history.location.search, history.location.state]",{"range":"214","text":"215"},"Update the dependencies array to be: [objectToString, prop.message]",{"range":"216","text":"217"},[2076,2078],"[global.todoLists]",[9924,9926],"[global.todoLists, history, id, processTodo, sortTodosCallback, state.sort, tagAndUpdateTodoLists]",[7590,7592],"[authContext.sort, global.todoLists, listSortingCallback, tagAndUpdateTodoLists]",[1582,1584],"[history.location.search, history.location.state]",[798,812],"[objectToString, prop.message]"]