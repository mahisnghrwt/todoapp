[{"C:\\Users\\Mahi\\Repos\\todo-app\\src\\index.js":"1","C:\\Users\\Mahi\\Repos\\todo-app\\src\\App.js":"2","C:\\Users\\Mahi\\Repos\\todo-app\\src\\reportWebVitals.js":"3","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\List.js":"4","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Context.js":"5","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\utility\\APICalls.js":"6","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\QuickButtons.js":"7","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Login.js":"8","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Home.js":"9","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Nav.js":"10","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\UlList\\LiList.js":"11","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\UlTodo\\LiTodo.js":"12","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Todo.js":"13","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\CreateListForm.js":"14","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\utility\\Utils.js":"15","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\utility\\Definations.js":"16","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\ProtectedRoute.js":"17"},{"size":500,"mtime":499162500000,"results":"18","hashOfConfig":"19"},{"size":1511,"mtime":1615267345428,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"19"},{"size":6131,"mtime":1615371522451,"results":"22","hashOfConfig":"19"},{"size":149,"mtime":1615074072425,"results":"23","hashOfConfig":"19"},{"size":3037,"mtime":1615164806204,"results":"24","hashOfConfig":"19"},{"size":1326,"mtime":1613941200318,"results":"25","hashOfConfig":"19"},{"size":2528,"mtime":1615149675749,"results":"26","hashOfConfig":"19"},{"size":5601,"mtime":1615150423811,"results":"27","hashOfConfig":"19"},{"size":609,"mtime":1613856797958,"results":"28","hashOfConfig":"19"},{"size":3934,"mtime":1615146312852,"results":"29","hashOfConfig":"19"},{"size":2216,"mtime":1615366051045,"results":"30","hashOfConfig":"19"},{"size":3090,"mtime":1615362559909,"results":"31","hashOfConfig":"19"},{"size":1962,"mtime":1615145939041,"results":"32","hashOfConfig":"19"},{"size":436,"mtime":1614957234198,"results":"33","hashOfConfig":"19"},{"size":384,"mtime":1615151101437,"results":"34","hashOfConfig":"19"},{"size":516,"mtime":1615149596164,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1n3pwho",{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"38"},"C:\\Users\\Mahi\\Repos\\todo-app\\src\\index.js",[],["82","83"],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\App.js",["84","85"],"import './ModernApp.css';\n\nimport React, {useEffect, useState} from 'react'\nimport {Route, BrowserRouter, Switch, Redirect} from 'react-router-dom'\nimport {AuthContext} from './components/Context'\n\nimport ProtectedRoute from './components/ProtectedRoute'\nimport Login from './components/Login'\nimport Home from './components/Home'\nimport List from './components/List'\nimport Todo from './components/Todo'\n\nconst App = _ => {\n  const [auth, setAuth] = useState({loggedIn: false})\n  const [global, setGlobal] = useState({})\n\n  return (\n      <div className=\"App\">       \n          <AuthContext.Provider value={[auth, setAuth]}>\n            <BrowserRouter>    \n              <Switch>\n                <Route exact path=\"/login\">\n                  <Login />\n                </Route>\n                <ProtectedRoute exact path='/'>\n                  <Home global={[global, setGlobal]} />\n                </ProtectedRoute>\n                <ProtectedRoute exact path='/list/:id'>\n                  <List global={[global, setGlobal]} />\n                </ProtectedRoute>\n                <ProtectedRoute exact path='/todo'>\n                  <Todo />\n                </ProtectedRoute>\n                {/* <Route exact path = \"/list/:id\" component={List} />\n                <Route exact path = \"/todo\" component={Todo} />\n                <Route exact path = \"/todo/:id\" component={Todo} /> */}\n              </Switch>\n            </BrowserRouter>\n          </AuthContext.Provider>\n      </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Mahi\\Repos\\todo-app\\src\\reportWebVitals.js",[],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\List.js",["86","87","88","89","90","91","92","93","94","95","96","97","98"],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Context.js",["99"],"import React, {useState} from 'react'\r\n\r\nexport const DataContext = React.createContext(null)\r\nexport const AuthContext = React.createContext(null)\r\n","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\utility\\APICalls.js",["100"],"const ENDPOINT = \"http://localhost:5001/api\"\r\nconst ENDPOINT_TODO = \"http://localhost:5001/api/todo\"\r\n\r\nexport const request = async (id) => {\r\n    const remoteURL = ENDPOINT + \"/\" + id\r\n    console.log(`id: ${remoteURL}`)\r\n    const response = await fetch(ENDPOINT + \"/\" + id, {\r\n        credentials: 'include'\r\n    })\r\n\r\n    return response.json()\r\n}\r\n\r\nexport const requestAll = async () => {\r\n    const response = await fetch(ENDPOINT, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Access-Control-Allow-Origin': 'http://localhost:3000/',\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        credentials: 'include'\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport const requestCreate = async (name) => {\r\n    const response = await fetch(ENDPOINT, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({title: name}),\r\n        credentials: 'include'\r\n    })\r\n    return response\r\n}\r\n\r\nexport const requestUpdate = async (id, title) => {\r\n    const response = await fetch(ENDPOINT, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({id, title}),\r\n        credentials: 'include'\r\n    })\r\n    return response\r\n}\r\n\r\nexport const requestDelete = async (id) => {\r\n    const response = await fetch(ENDPOINT + `/${id}`, {\r\n        method: 'DELETE',\r\n        credentials: 'include',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n    return response\r\n}\r\n\r\n// *------------------------------------------------------------------------------*\r\n\r\nexport const requestTodo = async (id) => {\r\n    const response = await fetch(ENDPOINT_TODO + \"/\" + id)\r\n    return response.json()\r\n}\r\n\r\nexport const requestTodoCreate = async (todoListId, todo) => {\r\n    todo.priority = todo.priority.toLowerCase()\r\n    const response = await fetch(ENDPOINT_TODO, {\r\n        method: 'POST',\r\n        credentials: 'include',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({todoListId, todo})\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport const requestTodoUpdate = async (todoListId, todo) => {\r\n    todo.priority = todo.priority.toLowerCase()\r\n    const response = await fetch(ENDPOINT_TODO, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({todoListId, todo}),\r\n        credentials: 'include'\r\n    })\r\n    return response\r\n}\r\n\r\nexport const requestTodoDelete = async (todo_list_id, todo_id) => {\r\n    const response = await fetch(ENDPOINT_TODO, {\r\n        method: 'DELETE',\r\n        credentials: 'include',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({todo_list_id, todo_id}),\r\n    })\r\n    if (response.status != 200) {\r\n        console.log(\"Something went wrong while deleting\")\r\n    }\r\n    return response.json()\r\n}","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\QuickButtons.js",["101"],"import React from 'react'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\n\r\nexport class ButtonC {\r\n    constructor(title, faIcon, onClick, dropdowns = []) {\r\n        this.title = title\r\n        this.faIcon = faIcon\r\n        this.dropdowns = dropdowns\r\n        this.onClick = onClick\r\n    }\r\n}\r\n\r\nexport const Button = ({ button }) => {\r\n    return (\r\n        <button onClick={button.onClick}>\r\n            {button.faIcon != null && <FontAwesomeIcon icon={button.faIcon} />} {button.title}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport const QuickButtons = ({buttons}) => {\r\n    return (\r\n        <div className=\"quick-buttons\">\r\n            {buttons.map((x) => {\r\n                if (x.dropdowns.length == 0) {\r\n                    return <Button button={x} />\r\n                }\r\n                else {\r\n                    return (\r\n                        <div className=\"dropdown\">\r\n                            <Button button={x} />\r\n                            <div className=\"dropdown-content\">\r\n                                {x.dropdowns.map((y) => {\r\n                                    return <Button button={y} />\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            })}\r\n        </div>\r\n    )\r\n}","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Login.js",["102","103"],"import React, {useContext} from 'react'\r\nimport {GoogleLogin} from 'react-google-login'\r\nimport {AuthContext} from './Context'\r\nimport {useHistory} from 'react-router-dom'\r\n\r\nconst Login = _ => {\r\n    const AUTH_ENDPOINT = \"http://localhost:5001/api/auth/google\"\r\n    //const [data, setData] = useContext(DataContext)\r\n    const [auth, setAuth] = useContext(AuthContext)\r\n\r\n    const history = useHistory()\r\n    //Verify idToken with the server, login user if green flagged, otherwise throw error\r\n    const verifyToken = async googleLoginResponse => {\r\n        const res = await fetch(AUTH_ENDPOINT, {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                idToken: googleLoginResponse.tokenId\r\n            }),\r\n            headers: {\r\n                'Access-Control-Allow-Origin':'http://localhost:3000/',\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            credentials: 'include'\r\n        })\r\n        //If authentication successful, mark user loggedIn in auth\r\n        if (res.status == 200) {\r\n            setAuth((prev) => {\r\n                return {\r\n                    ...prev, loggedIn: true\r\n                }\r\n            })\r\n            //Redirect the user to Home\r\n            var redirectPath = '/'\r\n            if (history.location && history.location.state && history.location.state.from) {\r\n                console.log(history.location.state)\r\n                redirectPath = history.location.state.from\r\n            }\r\n            history.push({\r\n                pathname: redirectPath\r\n            })\r\n        }\r\n        else {\r\n            //If authentication fails, notify the user!\r\n            //!TODO! Create a Notification component \r\n            console.log(\"Authentication failed at back-end layer!\")\r\n        }\r\n    }\r\n\r\n    const onSuccess = async googleLoginResponse => {\r\n        //Verify token with the server\r\n        verifyToken(googleLoginResponse)\r\n    }\r\n\r\n    const onFailure = async _ => {\r\n        setAuth(prev => {\r\n            return {\r\n                ...prev, loggedIn: false\r\n            }\r\n        })\r\n    }\r\n    \r\n    return (\r\n        <div className=\"login\">\r\n            <GoogleLogin\r\n                clientId={process.env.REACT_APP_CLIENT_ID}\r\n                isSignedIn={true}\r\n                buttonText=\"Login with Google\"\r\n                onSuccess={onSuccess}\r\n                onFailure={onFailure}\r\n                cookiePolicy={'single_host_origin'}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Home.js",["104","105","106","107","108","109","110","111","112","113","114"],"import React, {useEffect, useState, useContext} from 'react'\r\nimport {faFile, faSort} from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport {requestAll} from './utility/APICalls'\r\nimport Nav from './Nav'\r\nimport {QuickButtons, ButtonC} from './QuickButtons'\r\nimport LiList from './UlList/LiList'\r\nimport CreateListForm from './CreateListForm'\r\nimport {tagLists} from './utility/Utils'\r\nimport {reportType} from './utility/Definations'\r\nimport { AuthContext } from './Context'\r\nvar arraySort = require('array-sort')\r\n\r\nconst Home = ({global: [global, setGlobal]}) => {\r\n    const [auth, setAuth] = useContext(AuthContext)\r\n    const [state, setState] = useState({createListFormEnabled: false})\r\n    const sortType = {\r\n        ALPHABETICAL: \"title\",\r\n        PENDING_ITEMS: \"pendingCount\",\r\n        HIGH_PRIORITY_ITEMS: \"highPriorityCount\"\r\n    }\r\n    \r\n    //Event handler for \"New\" list button\r\n    const toggleForm = _ => {\r\n        setState((prev) => {\r\n            return {\r\n                ...prev, createListFormEnabled: !prev.createListFormEnabled\r\n            }\r\n        })\r\n    }\r\n\r\n    //Always update todoLists using this function only.\r\n    //It ensures todoLists always are tagged.\r\n    const tagAndUpdateTodoLists = cb => {\r\n        setGlobal((prev) => {\r\n            //If we have callback, process todoLists in it\r\n            cb(prev.todoLists)\r\n            //tag lists\r\n            tagLists(prev.todoLists)\r\n            //Update it in global\r\n            return {\r\n                ...prev, todoLists: prev.todoLists\r\n            }\r\n        })\r\n    }\r\n\r\n    //Handles subcomponent response received from remote endpoint\r\n    //for reportT, Refer to reportType\r\n    //remoteResponse, {status: number, json: Obj}\r\n    const subComponentReportHandler = (reportT, remoteResponse) => {\r\n        switch(reportT) {\r\n            case reportType.CREATE:\r\n                if (remoteResponse.status != 200) {\r\n                    //Error occured, do something here.\r\n                }\r\n                else {\r\n                    tagAndUpdateTodoLists(todoLists => todoLists.push(remoteResponse.json))\r\n                }\r\n                toggleForm()\r\n                break\r\n            case reportType.UPDATE:\r\n                if (remoteResponse.status != 200) {\r\n                    //Error occured, do something here.\r\n                }\r\n                else {\r\n                    //remoteResponse.json is the updated list\r\n                    //Replace the todoList with the updated one in global\r\n                    tagAndUpdateTodoLists(todoLists => {\r\n                        var index = todoLists.findIndex(x => x._id == remoteResponse.json._id)\r\n                        if (index != -1)\r\n                            todoLists[index] = remoteResponse.json\r\n                    })\r\n                }\r\n                break\r\n            case reportType.DELETE:\r\n                if (remoteResponse.status != 200) {\r\n                    //Error occured, do something here.\r\n                }\r\n                else {\r\n                    //remoteResponse.json._id indicates id of the list to be deleted\r\n                    tagAndUpdateTodoLists(todoLists => {\r\n                        const index = todoLists.findIndex(x => x._id === remoteResponse.json.id)\r\n                        if (index != -1)\r\n                            todoLists.splice(index, 1)\r\n                    })\r\n                }\r\n                break\r\n        }\r\n    }\r\n\r\n    //Sort the list, refer to sortType enum for available sorting options\r\n    const sortList = param => {\r\n        var todoLists = global.todoLists\r\n        arraySort(todoLists, param)\r\n        setGlobal(prev => ({...prev, todoLists}))\r\n    }\r\n\r\n    //Buttons, we will pass to \"QuickButtons\" component\r\n    const buttons = [\r\n                        new ButtonC(\"New\", faFile, toggleForm),\r\n                        new ButtonC(\"Sort\", faSort, null, [\r\n                            new ButtonC(\"Alphabetical\", null, () => sortList(sortType.ALPHABETICAL)),\r\n                            new ButtonC(\"Pending\", null, () => sortList(sortType.PENDING_ITEMS)),\r\n                            new ButtonC(\"High-priority items\", null, () => sortList(sortType.HIGH_PRIORITY_ITEMS))\r\n                        ])\r\n                    ]\r\n\r\n    //Fetch and store todoList for the current user\r\n    useEffect(() => {\r\n        if (!global.todoLists) {\r\n            requestAll()\r\n            .then(response => {\r\n                if (response.status != 200) { \r\n                    //Notify the user about the error\r\n                    return\r\n                }\r\n                return response.json()\r\n            })\r\n            .then(todoLists => {\r\n                todoLists = tagLists(todoLists)\r\n                setGlobal(prev => ({...prev, todoLists}))\r\n            }) \r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            <Nav />\r\n            <div className=\"content\">\r\n                <div className=\"title\">\r\n                    My Lists\r\n                </div>\r\n                <QuickButtons buttons={buttons}/>\r\n                <br />\r\n                {state.createListFormEnabled && <CreateListForm reportParent={subComponentReportHandler}/>}\r\n                <div className=\"ul-list\">\r\n                    {!global.todoLists ? \r\n                    <>Please wait while we are loading your data</> : \r\n                    global.todoLists.map((list) => <LiList key={list._id} list={list} reportParent={subComponentReportHandler} />)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Nav.js",[],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\UlList\\LiList.js",["115","116"],"import React, {useState} from 'react'\r\nimport {useHistory} from 'react-router-dom'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faExclamation, faExclamationTriangle, faTrashAlt, faEdit, faSave} from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport {requestDelete, requestUpdate} from '../utility/APICalls'\r\nimport {reportType} from '../utility/Definations'\r\n\r\nconst LiList = ({list, reportParent}) => {\r\n    const history = useHistory()\r\n    const [state, setState] = useState({rename: false, newTitle: \"\"})\r\n\r\n    const clicked = _ => {\r\n        history.push({\r\n            state: list,\r\n            pathname: `/list/${list._id}`\r\n        })\r\n    }\r\n\r\n    const deleteSelf = event => {\r\n        event.stopPropagation()\r\n        requestDelete(list._id)\r\n        .then(response => {\r\n            if (response.status != 200) {\r\n                reportParent(reportType.DELETE, {status: response.status})\r\n            }\r\n            else {\r\n                reportParent(reportType.DELETE, {status: response.status, json: {id: list._id}})\r\n            }\r\n        })\r\n    }\r\n\r\n    const toggleRename = event => {\r\n        //Check for event, because it is also called from renameSelf, which does not generates event\r\n        if (event) event.stopPropagation()\r\n        //state.newTitle has to be in sync with the current list.title\r\n        setState((prev) => {\r\n            return {\r\n                ...prev, rename: !prev.rename, newTitle: list.title\r\n            }\r\n        })\r\n    }\r\n\r\n    //triggered by onChange handler of title <input>\r\n    const titleChanged = event => {\r\n        setState((prev) => {\r\n            return {\r\n                ...prev, newTitle: event.target.value\r\n            }\r\n        })\r\n    }\r\n\r\n    const renameSelf = event => {\r\n        event.stopPropagation()\r\n        requestUpdate(list._id, state.newTitle)\r\n        .then(response => {\r\n            if (response.status != 200) {\r\n                reportParent(reportType.UPDATE, {status: response.status})\r\n                throw new Error(`${response.text}`)\r\n            }\r\n            return response.json()\r\n        })\r\n        .then(todoList => {\r\n            reportParent(reportType.UPDATE, {status: 200, json: todoList})\r\n        })\r\n        .catch(err => console.error(err))\r\n        toggleRename()\r\n    }\r\n\r\n    return (\r\n        <div className=\"li-list\" onClick={clicked}>\r\n            {state.rename ?\r\n            <span onClick={event => event.stopPropagation()}>\r\n                <input type=\"text\" className=\"li-title-rename\" onChange={titleChanged} value={state.newTitle} />\r\n                <FontAwesomeIcon onClick={renameSelf} className=\"fa-rename\" icon={faSave} />    \r\n            </span> :\r\n            <span onClick={event => event.stopPropagation()}>\r\n                {list.title}     \r\n                <FontAwesomeIcon onClick={toggleRename} className=\"fa-rename\" icon={faEdit} />\r\n            </span>}\r\n            <span className=\"li-list-right\">\r\n                <span className=\"indicator-group\">\r\n                    <span className=\"indicator\">\r\n                        <FontAwesomeIcon className=\"danger-text indicator-fa\" icon={faExclamation} />\r\n                        <span className=\"indicator-count\">{list.highPriorityCount}</span>\r\n                    </span>\r\n                    <span className=\"indicator\">\r\n                        <FontAwesomeIcon className=\"warning-text indicator-fa\" icon={faExclamationTriangle} />\r\n                        <span className=\"indicator-count\">{list.pendingCount}</span>\r\n                    </span>\r\n                </span>\r\n                <span className=\"indicator-group\">\r\n                    <span className=\"indicator\">\r\n                        <FontAwesomeIcon onClick={deleteSelf} className=\"indicator-fa\" icon={faTrashAlt} />\r\n                    </span>\r\n                </span>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LiList","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\UlTodo\\LiTodo.js",["117","118","119"],"import React, { useState, useContext } from 'react'\r\nimport {useHistory} from 'react-router-dom'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faClock, faEdit, faTrash} from '@fortawesome/free-solid-svg-icons'\r\nimport { requestTodoUpdate, requestTodoDelete } from '../utility/APICalls'\r\n\r\nconst LiTodo = ({todoListId, todo, reportParent}) => {\r\n    const [state, setState] = useState({detailedView: false})\r\n    const history = useHistory()\r\n    const msInHours = 3600000\r\n    const liTodoClass = `li-todo ${todo.priority}-priority`\r\n\r\n    var age = (new Date() - new Date(todo.created_at)) / msInHours\r\n    age = age.toFixed(2)\r\n    if (age > 24 ) { \r\n        age /= 24\r\n        age = age.toString() + \" days\"\r\n    }\r\n    else {\r\n        age = age.toString() + \" hours\"\r\n    }\r\n\r\n    const toggleDetails = () => {\r\n        setState((prev) => { return {...prev, detailedView: !prev.detailedView} })\r\n    }\r\n\r\n    const toggleCompelete = () => {\r\n        requestTodoUpdate(todoListId, todo._id, { compeleted: !todo.compeleted })\r\n    }\r\n\r\n    return (\r\n        <div className={liTodoClass} onClick={toggleDetails}>\r\n            <div className=\"li-todo-basic\">\r\n                <input type=\"checkbox\" checked={ todo.compeleted } onChange={toggleCompelete} />\r\n                <span>\r\n                    { todo.title }\r\n                </span>\r\n                <span className=\"li-todo-right\">\r\n                    <div className=\"indicator\">\r\n                        <FontAwesomeIcon className=\"fa-outline\" icon={faClock} />\r\n                        <span className=\"indicator-count\">{age}</span>\r\n                    </div>\r\n                    <span className=\"indicator\">\r\n                        <FontAwesomeIcon icon={faEdit} onClick={null} />\r\n                    </span>\r\n                    <span className=\"indicator\">\r\n                        <FontAwesomeIcon icon={faTrash} onClick={null} />\r\n                    </span>\r\n                </span>\r\n            </div>\r\n            {state.detailedView && \r\n                <div className=\"li-todo-detailed\">\r\n                    { todo.desc }\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LiTodo","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Todo.js",["120"],"import React, { useState, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport Nav from './Nav'\r\nimport {QuickButtons, ButtonC} from './QuickButtons'\r\n\r\nconst TodoEdit = () => {\r\n    //priorities enum\r\n    const priorities = [\"Low\", \"Moderate\", \"High\"]\r\n    const property = {\r\n        TITLE: 'title',\r\n        DESC: 'desc',\r\n        PRIORITY: 'priority'\r\n    }\r\n    //local state, required for controlled components\r\n    const [state, setState] = useState({\r\n        title: \"\", desc: \"\", priority: \"low\"\r\n    })   \r\n    const history = useHistory()\r\n    const [todoListId, setTodoListId] = useState(null)\r\n\r\n    const saveTodo = () => {\r\n        //transfer the todo as state to /list/todoListId\r\n        history.push(`/list/${todoListId}`, {todo: {...state}})\r\n    }\r\n\r\n    //Buttons for our form\r\n    const buttons = [\r\n        new ButtonC(state._id ? \"Save\" : \"Create\", null, saveTodo),\r\n        new ButtonC(\"Cancel\", null, () => history.go(-1))\r\n    ]   \r\n\r\n    useEffect(() => {\r\n        //Extract todoListId from URL\r\n        setTodoListId(() => history.location.search.split('=')[1])\r\n        if (history.location.state && history.location.state.todo) {\r\n            setState(() => history.location.state.todo)\r\n        }\r\n    }, [])\r\n\r\n    const propertyChanged = (property, event) => {\r\n        setState(prev => {\r\n            prev[property] = event.target.value\r\n            return {\r\n                ...prev\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            <Nav />\r\n            <div className=\"content\">\r\n                <div className=\"title\">\r\n                    &lt;todo-title&gt;\r\n                </div>\r\n                <br />\r\n                <div className=\"todo-form\">\r\n                    <div className=\"form-row\">\r\n                        <div className=\"input-group\">\r\n                            <label>Title</label>\r\n                            <input type=\"text\" value={state.title} onChange={(event) => propertyChanged(property.TITLE, event)} />\r\n                        </div>\r\n                        <div className=\"input-group\">\r\n                            <label>Priority</label>\r\n                            <select value={state.priority} onChange={(event) => propertyChanged(property.PRIORITY, event)} >\r\n                                {\r\n                                    priorities.map((x, index) => {\r\n                                        return <option key={index} value={x.toLowerCase()}>{x}</option>\r\n                                    })\r\n                                }\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"input-group\">\r\n                        <label>Desc</label>\r\n                        <textarea onChange={(event) => propertyChanged(property.DESC, event)} value={state.desc} />\r\n                    </div>\r\n                    <QuickButtons buttons={buttons} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoEdit","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\CreateListForm.js",["121"],"import React, {useState} from 'react'\r\nimport {faSave} from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport {requestCreate} from './utility/APICalls'\r\nimport {reportType} from './utility/Definations'\r\nimport {ButtonC, Button} from './QuickButtons'\r\n\r\n//reportParent => check out the func defination\r\nconst CreateListForm = ({reportParent}) => {\r\n    const [state, setState] = useState({title: \"\"})\r\n    \r\n    const createList = _ => {\r\n        requestCreate(state.title)\r\n        .then(response => {\r\n            if (response.status != 200) {\r\n                //Notify the user of error\r\n                reportParent(reportType.CREATE, {status: response.status}) \r\n                throw new Error(`${response.text}`)\r\n            }\r\n            return response.json()\r\n        })\r\n        .then((todoList) => {\r\n            //Pass this todoList back to the Home component\r\n            //Global will be updated there\r\n            //Reasoning behind this is, CreateListForm is kind of a 'sub-component', it must report to its Parent component in case of any global update\r\n            console.log(todoList)\r\n            reportParent(reportType.CREATE, {status: 200, json: todoList}) \r\n        })\r\n        .catch(err => {\r\n            console.error(err)\r\n        })\r\n    }\r\n\r\n    //On title input change update the state, since the input field is a Controlled Component\r\n    const titleChanged = event => {\r\n        setState((prev) => ({ ...prev, title: event.target.value }))\r\n    }\r\n\r\n    const buttonData = new ButtonC(\"Save\", faSave, createList)\r\n\r\n    return (\r\n        <div className=\"create-list\">\r\n            <div className=\"form-title\">Create a new list</div>\r\n            <div className=\"input-group inline\">\r\n                <label>Title</label>\r\n                <input type=\"text\" value={state.title} onChange={titleChanged} />\r\n                <Button button={buttonData} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateListForm","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\utility\\Utils.js",[],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\utility\\Definations.js",[],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\ProtectedRoute.js",["122"],"import {useContext} from 'react'\r\nimport {Redirect, Route} from 'react-router-dom'\r\nimport { AuthContext } from './Context'\r\n\r\nconst ProtectedRoute = ({path, children, ...restProps}) => {\r\n    const [auth, setAuth] = useContext(AuthContext)\r\n    return (<>\r\n        {auth.loggedIn ? \r\n        <Route path={path} {...restProps}>\r\n            {children}\r\n        </Route>\r\n        :\r\n        <Redirect to={{pathname: '/login', state: {from: path}}} />\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProtectedRoute",{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":3,"column":16,"nodeType":"129","messageId":"130","endLine":3,"endColumn":25},{"ruleId":"127","severity":1,"message":"131","line":4,"column":39,"nodeType":"129","messageId":"130","endLine":4,"endColumn":47},{"ruleId":"127","severity":1,"message":"132","line":7,"column":9,"nodeType":"129","messageId":"130","endLine":7,"endColumn":16},{"ruleId":"127","severity":1,"message":"133","line":7,"column":56,"nodeType":"129","messageId":"130","endLine":7,"endColumn":73},{"ruleId":"134","severity":1,"message":"135","line":30,"column":9,"nodeType":"136","messageId":"137","endLine":69,"endColumn":10},{"ruleId":"138","severity":1,"message":"139","line":32,"column":43,"nodeType":"140","messageId":"141","endLine":32,"endColumn":45},{"ruleId":"138","severity":1,"message":"142","line":37,"column":71,"nodeType":"140","messageId":"141","endLine":37,"endColumn":73},{"ruleId":"138","severity":1,"message":"139","line":46,"column":43,"nodeType":"140","messageId":"141","endLine":46,"endColumn":45},{"ruleId":"138","severity":1,"message":"142","line":52,"column":81,"nodeType":"140","messageId":"141","endLine":52,"endColumn":83},{"ruleId":"138","severity":1,"message":"142","line":53,"column":107,"nodeType":"140","messageId":"141","endLine":53,"endColumn":109},{"ruleId":"143","severity":1,"message":"144","line":54,"column":87,"nodeType":"145","messageId":"146","endLine":54,"endColumn":88,"fix":"147"},{"ruleId":"138","severity":1,"message":"139","line":62,"column":43,"nodeType":"140","messageId":"141","endLine":62,"endColumn":45},{"ruleId":"138","severity":1,"message":"139","line":77,"column":37,"nodeType":"140","messageId":"141","endLine":77,"endColumn":39},{"ruleId":"138","severity":1,"message":"139","line":92,"column":37,"nodeType":"140","messageId":"141","endLine":92,"endColumn":39},{"ruleId":"148","severity":1,"message":"149","line":133,"column":9,"nodeType":"150","endLine":133,"endColumn":11,"suggestions":"151"},{"ruleId":"127","severity":1,"message":"152","line":1,"column":16,"nodeType":"129","messageId":"130","endLine":1,"endColumn":24},{"ruleId":"138","severity":1,"message":"139","line":105,"column":25,"nodeType":"140","messageId":"141","endLine":105,"endColumn":27},{"ruleId":"138","severity":1,"message":"142","line":25,"column":40,"nodeType":"140","messageId":"141","endLine":25,"endColumn":42},{"ruleId":"127","severity":1,"message":"153","line":9,"column":12,"nodeType":"129","messageId":"130","endLine":9,"endColumn":16},{"ruleId":"138","severity":1,"message":"142","line":26,"column":24,"nodeType":"140","messageId":"141","endLine":26,"endColumn":26},{"ruleId":"127","severity":1,"message":"153","line":15,"column":12,"nodeType":"129","messageId":"130","endLine":15,"endColumn":16},{"ruleId":"127","severity":1,"message":"154","line":15,"column":18,"nodeType":"129","messageId":"130","endLine":15,"endColumn":25},{"ruleId":"134","severity":1,"message":"135","line":51,"column":9,"nodeType":"136","messageId":"137","endLine":88,"endColumn":10},{"ruleId":"138","severity":1,"message":"139","line":53,"column":43,"nodeType":"140","messageId":"141","endLine":53,"endColumn":45},{"ruleId":"138","severity":1,"message":"139","line":62,"column":43,"nodeType":"140","messageId":"141","endLine":62,"endColumn":45},{"ruleId":"138","severity":1,"message":"142","line":69,"column":68,"nodeType":"140","messageId":"141","endLine":69,"endColumn":70},{"ruleId":"138","severity":1,"message":"139","line":70,"column":35,"nodeType":"140","messageId":"141","endLine":70,"endColumn":37},{"ruleId":"138","severity":1,"message":"139","line":76,"column":43,"nodeType":"140","messageId":"141","endLine":76,"endColumn":45},{"ruleId":"138","severity":1,"message":"139","line":83,"column":35,"nodeType":"140","messageId":"141","endLine":83,"endColumn":37},{"ruleId":"138","severity":1,"message":"139","line":113,"column":37,"nodeType":"140","messageId":"141","endLine":113,"endColumn":39},{"ruleId":"148","severity":1,"message":"155","line":124,"column":8,"nodeType":"150","endLine":124,"endColumn":10,"suggestions":"156"},{"ruleId":"138","severity":1,"message":"139","line":24,"column":33,"nodeType":"140","messageId":"141","endLine":24,"endColumn":35},{"ruleId":"138","severity":1,"message":"139","line":57,"column":33,"nodeType":"140","messageId":"141","endLine":57,"endColumn":35},{"ruleId":"127","severity":1,"message":"157","line":1,"column":27,"nodeType":"129","messageId":"130","endLine":1,"endColumn":37},{"ruleId":"127","severity":1,"message":"133","line":5,"column":29,"nodeType":"129","messageId":"130","endLine":5,"endColumn":46},{"ruleId":"127","severity":1,"message":"158","line":9,"column":11,"nodeType":"129","messageId":"130","endLine":9,"endColumn":18},{"ruleId":"148","severity":1,"message":"159","line":39,"column":8,"nodeType":"150","endLine":39,"endColumn":10,"suggestions":"160"},{"ruleId":"138","severity":1,"message":"139","line":15,"column":33,"nodeType":"140","messageId":"141","endLine":15,"endColumn":35},{"ruleId":"127","severity":1,"message":"154","line":6,"column":18,"nodeType":"129","messageId":"130","endLine":6,"endColumn":25},"no-native-reassign",["161"],"no-negated-in-lhs",["162"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'request' is defined but never used.","'requestTodoDelete' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","rest-spread-spacing","Unexpected whitespace after spread property operator.","ExperimentalSpreadProperty","unexpectedWhitespace",{"range":"163","text":"164"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'global.todoLists', 'handleReceivedTodo', 'history', and 'id'. Either include them or remove the dependency array. If 'setState' needs the current value of 'global.todoLists', you can also switch to useReducer instead of useState and read 'global.todoLists' in the reducer.","ArrayExpression",["165"],"'useState' is defined but never used.","'auth' is assigned a value but never used.","'setAuth' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'global.todoLists' and 'setGlobal'. Either include them or remove the dependency array. If 'setGlobal' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["166"],"'useContext' is defined but never used.","'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history.location.search' and 'history.location.state'. Either include them or remove the dependency array.",["167"],"no-global-assign","no-unsafe-negation",[2496,2497],"",{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},"Update the dependencies array to be: [global.todoLists, handleReceivedTodo, history, id]",{"range":"174","text":"175"},"Update the dependencies array to be: [global.todoLists, setGlobal]",{"range":"176","text":"177"},"Update the dependencies array to be: [history.location.search, history.location.state]",{"range":"178","text":"179"},[5383,5385],"[global.todoLists, handleReceivedTodo, history, id]",[4827,4829],"[global.todoLists, setGlobal]",[1266,1268],"[history.location.search, history.location.state]"]