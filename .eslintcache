[{"C:\\Users\\Mahi\\Repos\\todo-app\\src\\index.js":"1","C:\\Users\\Mahi\\Repos\\todo-app\\src\\App.js":"2","C:\\Users\\Mahi\\Repos\\todo-app\\src\\reportWebVitals.js":"3","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\List.js":"4","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Header.js":"5","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\TodoFolder.js":"6","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Context.js":"7","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\sub_components\\CreateListForm.js":"8","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\sub_components\\ConfirmationForm.js":"9","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\sub_components\\ContextMenu.js":"10","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\utility\\APICalls.js":"11","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\QuickButtons.js":"12","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\TodoList.js":"13","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\TodoItem.js":"14","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\utility\\uuid.js":"15","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\sub_components\\PopupForm.js":"16","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\sub_components\\ContextMenuV2.js":"17"},{"size":500,"mtime":499162500000,"results":"18","hashOfConfig":"19"},{"size":589,"mtime":1612490786388,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"19"},{"size":1269,"mtime":1612489147104,"results":"22","hashOfConfig":"19"},{"size":336,"mtime":1612524789268,"results":"23","hashOfConfig":"19"},{"size":5250,"mtime":1612490190745,"results":"24","hashOfConfig":"19"},{"size":131,"mtime":1612516629813,"results":"25","hashOfConfig":"19"},{"size":921,"mtime":1612150893209,"results":"26","hashOfConfig":"19"},{"size":1258,"mtime":1612150893212,"results":"27","hashOfConfig":"19"},{"size":1732,"mtime":1612056078710,"results":"28","hashOfConfig":"19"},{"size":1101,"mtime":1612501336896,"results":"29","hashOfConfig":"19"},{"size":937,"mtime":1612525625191,"results":"30","hashOfConfig":"19"},{"size":3966,"mtime":1612525743185,"results":"31","hashOfConfig":"19"},{"size":1986,"mtime":1612520408824,"results":"32","hashOfConfig":"19"},{"size":110,"mtime":1612490743881,"results":"33","hashOfConfig":"19"},{"size":1010,"mtime":1612525804080,"results":"34","hashOfConfig":"19"},{"size":409,"mtime":1612518096958,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1n3pwho",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Mahi\\Repos\\todo-app\\src\\index.js",[],["74","75"],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\App.js",[],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\reportWebVitals.js",[],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\List.js",["76","77","78"],"import React, {useState, useContext, useEffect} from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport ContextMenu from './sub_components/ContextMenu'\r\nimport {Context} from './Context'\r\n\r\nconst List = ({data, deleteHandler, checkedToggler, isChecked}) =>  {    \r\n    const {mainState, setMainState} = useContext(Context)\r\n    \r\n    //Context menu props object\r\n    const contextMenuProps = {\r\n        items: [\"delete\"], //string value\r\n        listener: [() => deleteHandler(data._id)],   // listener\r\n    }\r\n\r\n    const clickHandler = (event) => {\r\n        setMainState((prevState) => {\r\n            return {...prevState, contextMenuEnabled: false}\r\n        })\r\n        checkedToggler(data._id)\r\n    }\r\n\r\n    const destination = {\r\n        pathname: '/list/' + data._id,\r\n        state: {\r\n            data: data\r\n        }\r\n    }\r\n\r\n    return (\r\n        <NavLink to={destination}>\r\n            <ContextMenu items={contextMenuProps.items} listener={contextMenuProps.listener}>\r\n                <li className=\"list-li\" onClick={clickHandler}>\r\n                    <input type=\"checkbox\" checked={isChecked} readOnly/>\r\n                    {data.name}\r\n                </li>\r\n            </ContextMenu>\r\n        </NavLink>\r\n    )\r\n}\r\n\r\nexport default List;","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Header.js",[],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\TodoFolder.js",["79"],"import React, {useEffect, useState, useRef} from 'react'\r\nimport List from './List'\r\nimport QuickButtons from './QuickButtons'\r\nimport {Context} from './Context'\r\nimport {requestDelete, requestAll} from './utility/APICalls'\r\nimport {CreateListForm} from './sub_components/CreateListForm'\r\nimport Header from './Header'\r\nimport ConfirmationForm from './sub_components/ConfirmationForm'\r\n\r\nconst TodoFolder = () => {\r\n    //States\r\n    const [state, setState] = useState([])\r\n    const [mainState, setMainState] = useState({coreData: null, createListForm: false, contextMenuEnabled: false, clickId: 0})\r\n    const [checkedLists, setCheckedLists] = useState({})\r\n    const checkListRef = useRef(checkedLists)\r\n\r\n    //Event handlers\r\n    const onDeleteList = (id) => {\r\n        //Request to delete an id on API\r\n        requestDelete(id)\r\n        .then(data => {\r\n            //then update the state with new data returned from get request\r\n            requestAll().then(data => { setState(data) })\r\n        })\r\n    }\r\n\r\n\r\n    // onClick = \"create List +\" button\r\n    const addListHandler = (event) => {\r\n        event.stopPropagation()\r\n        setMainState((prev) => {\r\n            return {\r\n                ...prev, createListForm: !prev.createListForm\r\n            }\r\n        })\r\n    }\r\n \r\n    //Fetch lists from the API\r\n    useEffect(() => {\r\n        let mounted = true;\r\n        const currentState = () => {\r\n            setMainState((prev) => {\r\n                return {\r\n                    ...prev, clickId: prev.clickId + 1, createListForm: false, deleteListForm: false\r\n                }\r\n            })   \r\n        }\r\n\r\n        window.addEventListener(\"click\", () => {\r\n            currentState()\r\n        })\r\n       requestAll()\r\n       .then((data) => {\r\n           if (!mounted) return\r\n           setState(data)\r\n\r\n           //Init the 'chekedLists' map with false values\r\n           let tempMap = {}\r\n           data.map((x) => {\r\n                tempMap[x._id] = false\r\n           })\r\n           setCheckedLists(tempMap) \r\n           checkListRef.current = tempMap\r\n       })\r\n\r\n       return function cleanup() {\r\n           mounted = false\r\n           window.removeEventListener(\"click\", currentState)\r\n       }\r\n    }, [])\r\n\r\n    const EmptyDir = (props) => {\r\n        return (\r\n            <div className=\"background-instructions\">Right click to create a new list</div>\r\n        )\r\n    }\r\n\r\n    const checkListHandler = (id_) => {\r\n        setCheckedLists((prevState) => {\r\n            checkListRef.current = prevState\r\n            return {\r\n                ...prevState, [id_]: !prevState[id_]\r\n            }\r\n        })\r\n    }\r\n\r\n    const deleteListHandler = (event) => {\r\n        event.stopPropagation()\r\n        setMainState((prevState) => {\r\n            return {\r\n                ...prevState, deleteListForm: !prevState.deleteListForm\r\n            }\r\n        })\r\n    }\r\n\r\n    const actionHandler = (success) => {\r\n        setMainState((prevState) => {\r\n            return {...prevState, createListForm: false, deleteListForm: false}\r\n        })\r\n\r\n        if (success === false) {\r\n            return\r\n        }\r\n\r\n        requestAll()\r\n        .then((data) => setState(data))\r\n    }\r\n    \r\n    return (\r\n        <Context.Provider value={{mainState, setMainState}}>\r\n            <div className=\"root\">\r\n                <Header title=\"TodoApp\" nav=\"root\" />\r\n                <div className = \"content\">\r\n                    <QuickButtons data={[\r\n                        {\r\n                            name: \"New List +\",\r\n                            className_: null,\r\n                            eventListener: addListHandler\r\n                        },\r\n                        {\r\n                            name: \"Delete List -\",\r\n                            className_: \"danger\",\r\n                            eventListener: deleteListHandler\r\n                        }\r\n                    ]} />\r\n                    <hr />\r\n                    <div className = {state.length !== 0 ? \"main-content\" : \"main-content empty-container\"}>\r\n                        <ul className = \"folder\">\r\n                            {\r\n                                mainState.createListForm === true && <CreateListForm wasSuccess={actionHandler}/>\r\n                            }\r\n                            {\r\n                                mainState.deleteListForm === true && <ConfirmationForm checkedLists={checkedLists} actionHandler_={actionHandler}/>\r\n                            }\r\n                            {\r\n                                //if there are no list, display the message for the user\r\n                                state.length === 0 && <EmptyDir />\r\n                            }\r\n                            {\r\n                                state.map((x) => {\r\n                                    return <List key={x._id} checkedToggler={checkListHandler} deleteHandler={onDeleteList} isChecked={checkedLists[x._id]} data={x}/>\r\n                                }\r\n                                )\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Context.Provider>\r\n    )\r\n}\r\n\r\n\r\nexport default TodoFolder","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\Context.js",[],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\sub_components\\CreateListForm.js",[],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\sub_components\\ConfirmationForm.js",["80"],"import React, { useEffect, useState } from 'react'\r\nimport { requestDeleteMany } from '../utility/APICalls'\r\n\r\nconst ConfirmationForm = ({checkedLists, actionHandler_}) => {\r\n    const [ids, setIds]  = useState([])\r\n    \r\n    const deleteHandler = () => {\r\n        requestDeleteMany(ids)\r\n        .then(data => {\r\n            actionHandler_(true)\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        let ids_ = []\r\n        for (const prop in checkedLists) {\r\n            if (checkedLists[prop] === true) {\r\n                ids_.push(prop)\r\n            }\r\n        }\r\n        setIds(ids_)\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"confirmation-form\" onClick={(event) => { event.stopPropagation() }}>\r\n            <div className=\"row-center\">\r\n                { ids.length === 0 ? <span>You must select atleast one list.</span> : <span>Are you sure you wanna delete the lists?</span> }\r\n            </div>\r\n            <div className=\"row-center\">\r\n                {ids.length > 0 && <button className=\"danger\" onClick={deleteHandler}>Yes, Delete</button>}\r\n                <button onClick={() => actionHandler_(false)}>{ ids.length === 0 ? \"Okay\" : \"Cancel\" }</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConfirmationForm","C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\sub_components\\ContextMenu.js",[],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\utility\\APICalls.js",[],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\QuickButtons.js",[],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\TodoList.js",["81","82","83"],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\TodoItem.js",["84"],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\utility\\uuid.js",[],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\sub_components\\PopupForm.js",[],"C:\\Users\\Mahi\\Repos\\todo-app\\src\\components\\sub_components\\ContextMenuV2.js",[],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":1,"column":16,"nodeType":"91","messageId":"92","endLine":1,"endColumn":24},{"ruleId":"89","severity":1,"message":"93","line":1,"column":38,"nodeType":"91","messageId":"92","endLine":1,"endColumn":47},{"ruleId":"89","severity":1,"message":"94","line":7,"column":12,"nodeType":"91","messageId":"92","endLine":7,"endColumn":21},{"ruleId":"95","severity":1,"message":"96","line":59,"column":25,"nodeType":"97","messageId":"98","endLine":59,"endColumn":27},{"ruleId":"99","severity":1,"message":"100","line":22,"column":8,"nodeType":"101","endLine":22,"endColumn":10,"suggestions":"102"},{"ruleId":"89","severity":1,"message":"103","line":1,"column":38,"nodeType":"91","messageId":"92","endLine":1,"endColumn":48},{"ruleId":"89","severity":1,"message":"104","line":7,"column":8,"nodeType":"91","messageId":"92","endLine":7,"endColumn":12},{"ruleId":"99","severity":1,"message":"105","line":38,"column":8,"nodeType":"101","endLine":38,"endColumn":10,"suggestions":"106"},{"ruleId":"89","severity":1,"message":"107","line":7,"column":12,"nodeType":"91","messageId":"92","endLine":7,"endColumn":23},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'mainState' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkedLists'. Either include it or remove the dependency array.","ArrayExpression",["110"],"'useContext' is defined but never used.","'uuid' is defined but never used.","React Hook useEffect has missing dependencies: 'id' and 'locState'. Either include them or remove the dependency array.",["111"],"'menuContext' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},"Update the dependencies array to be: [checkedLists]",{"range":"116","text":"117"},"Update the dependencies array to be: [id, locState]",{"range":"118","text":"119"},[587,589],"[checkedLists]",[1341,1343],"[id, locState]"]